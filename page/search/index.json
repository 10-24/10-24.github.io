[{"content":"https://thankful-water-038154a00.2.azurestaticapps.net/\n","date":"2022-11-24T00:00:00Z","permalink":"https://thankful-water-038154a00.2.azurestaticapps.net/post/top/","title":"https://thankful-water-038154a00.2.azurestaticapps.net/"},{"content":"JavaScript笔记 JavaScript 显示方案 JavaScript 能够以不同方式“显示”数据：\n使用 window.alert() 写入警告框 使用 document.write() 写入 HTML 输出 使用 innerHTML 写入 HTML 元素 使用 console.log() 写入浏览器控制台 语法 var x, y;\t// 如何声明变量 x = 7; y = 8;\t// 如何赋值 z = x + y;\t// 如何计算值 块作用域 通过 var 关键词声明的变量没有块作用域。 在块 {} 内声明的变量可以从块之外进行访问。\n可以使用 let 关键词声明拥有块作用域的变量。 在块 {} 内声明的变量无法从块外访问：\n{ var x = 10; } // 此处可以使用 x { let x = 10; } // 此处不可以使用 x 在第一个例子中，在循环中使用的变量使用 var 重新声明了循环之外的变量。 在第二个例子中，在循环中使用的变量使用 let 并没有重新声明循环外的变量。 如果在循环中用 let 声明了变量 i，那么只有在循环内，变量 i 才是可见的。 var i = 7; for (var i = 0; i \u0026lt; 10; i++) { // 一些语句 } // 此处，i 为 10 let i = 7; for (let i = 0; i \u0026lt; 10; i++) { // 一些语句 } // 此处 i 为 7 重新声明变量 允许在程序的任何位置使用 var 重新声明 JavaScript 变量 var x = 10; // 现在，x 为 10 var x = 6; // 现在，x 为 6 在不同的作用域或块中，通过 let 重新声明变量是允许的 let x = 6; // 允许 { let x = 7; // 允许 } { let x = 8; // 允许 } 其余情况不可以重新声明 不是真正的常数 关键字 const 有一定的误导性。 它没有定义常量值。它定义了对值的常量引用。 因此，我们不能更改常量原始值，但我们可以更改常量对象的属性。\n特性 不能改变原始值 可以更改常量对象的属性 // 您可以创建 const 对象： const car = {type:\u0026#34;porsche\u0026#34;, model:\u0026#34;911\u0026#34;, color:\u0026#34;Black\u0026#34;}; // 您可以更改属性： car.color = \u0026#34;White\u0026#34;; // 您可以添加属性： car.owner = \u0026#34;Bill\u0026#34;; 但是您无法重新为常量对象赋值：\nconst car = {type:\u0026#34;porsche\u0026#34;, model:\u0026#34;911\u0026#34;, color:\u0026#34;Black\u0026#34;}; car = {type:\u0026#34;Volvo\u0026#34;, model:\u0026#34;XC60\u0026#34;, color:\u0026#34;White\u0026#34;}; // ERROR 常量数组可以更改 // 您可以创建常量数组： const cars = [\u0026#34;Audi\u0026#34;, \u0026#34;BMW\u0026#34;, \u0026#34;porsche\u0026#34;]; // 您可以更改元素： cars[0] = \u0026#34;Honda\u0026#34;; // 您可以添加元素： cars.push(\u0026#34;Volvo\u0026#34;); 但是您无法重新为常量数组赋值\nconst cars = [\u0026#34;Audi\u0026#34;, \u0026#34;BMW\u0026#34;, \u0026#34;porsche\u0026#34;]; cars = [\u0026#34;Honda\u0026#34;, \u0026#34;Toyota\u0026#34;, \u0026#34;Volvo\u0026#34;]; // ERROR 运算符 算数 运算符 描述 + 加法 - 减法 * 乘法 / 除法 % 取模（余数） ++ 递加 \u0026ndash; 递减 赋值 运算符 例子 等同于 = x = y x = y += x += y x = x + y -= x -= y x = x - y *= x *= y x = x * y /= x /= y x = x / y %= x %= y x = x % y 比较 运算符 描述 == 等于 === 等值等型 != 不相等 !== 不等值或不等型 \u0026gt; 大于 \u0026lt; 小于 \u0026gt;= 大于或等于 \u0026lt;= 小于或等于 ? 三元运算符 逻辑 运算符 描述 \u0026amp;\u0026amp; 逻辑与 || 逻辑或 ! 逻辑非 类型 运算符 描述 typeof 返回变量的类型。 instanceof 返回 true，如果对象是对象类型的实例。 ？位运算符 运算符 描述 例子 等同于 结果 十进制 \u0026amp; 与 5 \u0026amp; 1 0101 \u0026amp; 0001 0001 1 | 或 5 | 1 0101 | 0001 0101 5 ~ 非 ~ 5 ~0101 1010 10 ^ 异或 5 ^ 1 0101 ^ 0001 0100 4 \u0026laquo; 零填充左位移 5 \u0026laquo; 1 0101 \u0026laquo; 1 1010 10 \u0026raquo; 有符号右位移 5 \u0026raquo; 1 0101 \u0026raquo; 1 0010 2 \u0026raquo;\u0026gt; 零填充右位移 5 \u0026raquo;\u0026gt; 1 0101 \u0026raquo;\u0026gt; 1 0010 2 优先级 20 ( ) 表达式分组 (3 + 4) 19 . 成员 person.name 19 [] 成员 person[\u0026ldquo;name\u0026rdquo;] 19 () 函数调用 myFunction() 19 new 创建 new Date() 17 ++ 后缀递增 i++ 17 \u0026ndash; 后缀递减 i\u0026ndash; 16 ++ 前缀递增 ++i 16 \u0026ndash; 前缀递减 \u0026ndash;i 16 ! 逻辑否 !(x==y) 16 typeof 类型 typeof x 15 ** 求幂 (ES7) 10 ** 2 14 * 乘 10 * 5 14 / 除 10 / 5 14 % 模数除法 10 % 5 13 + 加 10 + 5 13 - 减 10 - 5 12 \u0026laquo; 左位移 x \u0026laquo; 2 12 \u0026raquo; 右位移 x \u0026raquo; 2 12 \u0026raquo;\u0026gt; 右位移（无符号） x \u0026raquo;\u0026gt; 2 11 \u0026lt; 小于 x \u0026lt; y 11 \u0026lt;= 小于或等于 x \u0026lt;= y 11 \u0026gt; 大于 x \u0026gt; y 11 \u0026gt;= 大于或等于 x \u0026gt;= y 11 in 对象中的属性 \u0026ldquo;PI\u0026rdquo; in Math 11 instanceof 对象的实例 instanceof Array 10 == 相等 x == y 10 === 严格相等 x === y 10 != 不相等 x != y 10 !== 严格不相等 x !== y 9 \u0026amp; 按位与 x \u0026amp; y 8 ^ 按位 XOR x ^ y 7 | 按位或 x | y 6 \u0026amp;\u0026amp; 逻辑与 x \u0026amp;\u0026amp; y 5 || 逻辑否 x || y 4 ? : 条件 ? \u0026ldquo;Yes\u0026rdquo; : \u0026ldquo;No\u0026rdquo; 3 = 赋值 x = y 3 += 赋值 x += y 3 -= 赋值 x -= y 3 *= 赋值 x *= y 3 %= 赋值 x %= y 3 \u0026laquo;= 赋值 x \u0026laquo;= y 3 \u0026raquo;= 赋值 x \u0026raquo;= y 3 \u0026raquo;\u0026gt;= 赋值 x \u0026raquo;\u0026gt;= y 3 \u0026amp;= 赋值 x \u0026amp;= y 3 ^= 赋值 x ^= y 3 |= 赋值 x |= y 2 yield 暂停函数 yield x 1 , 逗号 7 , 8 数据类型 var length = 7; // 数字 var lastName = \u0026#34;Gates\u0026#34;; // 字符串 var cars = [\u0026#34;Porsche\u0026#34;, \u0026#34;Volvo\u0026#34;, \u0026#34;BMW\u0026#34;]; // 数组 var x = {firstName:\u0026#34;Bill\u0026#34;, lastName:\u0026#34;Gates\u0026#34;}; // 对象 在第一个例子中，JavaScript 把 911 和 7 视作数值，直到遇见 \u0026ldquo;Porsche\u0026rdquo;。 在第二个例子中，由于第一个操作数是字符串，因此所有操作数都被视为字符串。\nvar x = 911 + 7 + \u0026#34;Porsche\u0026#34;; x= 918Porsche\nvar x = \u0026#34;Porsche\u0026#34; + 911 + 7; x = Porsche9117\nUndefined 与 Null 的区别 Undefined 与 null 的值相等，但类型不相等：\ntypeof undefined // undefined typeof null // object null === undefined // false null == undefined // true 复杂数据 typeof 运算符可返回以下两种类型之一：\nfunction object typeof 运算符把对象、数组或 null 返回 object。\ntypeof 运算符不会把函数返回 object。\ntypeof {name:\u0026#39;Bill\u0026#39;, age:62} // 返回 \u0026#34;object\u0026#34; typeof [1,2,3,4] // 返回 \u0026#34;object\u0026#34; (并非 \u0026#34;array\u0026#34;，参见下面的注释) typeof null // 返回 \u0026#34;object\u0026#34; typeof function myFunc(){} // 返回 \u0026#34;function\u0026#34; ","date":"2022-12-14T00:00:00Z","permalink":"https://thankful-water-038154a00.2.azurestaticapps.net/post/javascriptnote/","title":"JavaScript笔记"},{"content":"超级粘贴 起因 最近发现一些平台是不能直接粘贴内容的（具体我就不说是哪个平台了😅），所以我编写了一段超级粘贴的程序\n编写 思路 毕竟粘贴这个行为是不合法的，那么我们能不能通过模拟键盘输入的方式来进行“粘贴”呢？这样思路就十分清晰了\n读取剪切板内容 将内容通过模拟键盘进行粘贴 我只会Python所以我就用Python来写:)\n编写过程 首先采用的是pyperclip进行剪切板读取，这一步没有什么问题。 然后我采用pyautogui模拟输入，然后重点是它不能输入中文 于是我又去网上找了找能输入中文的方案，最终找到了一个很好用的库pynput 到这就终于能输入中文了。 最后再加上按键监听就完成了 代码 import pyperclip from pynput.keyboard import Controller,Listener,Key import time def paste(): time.sleep(0.2) #按下后间隔0.2s i=pyperclip.paste() keyboard = Controller() keyboard.type(i) print(\u0026#34;粘贴成功\u0026#34;+\u0026#34;\\n\u0026#34;+i+\u0026#34;\\n\u0026#34;) def on_release(key): if key == Key.esc: # 停止监听 return False if key == Key.f2: # 这里是按f2调用粘贴函数 paste() with Listener( on_release=on_release) as listener: listener.join() 我也会把exe文件发布在GitHub上\nhttps://github.com/ohdmire/SuperPaste/releases\n使用教程 只要运行程序按下F2就能粘贴，按ESC退出程序\n你可能还需要将输入法切换为英文\n如果你需要也可以自行更改按键，具体参考官方文档 https://pynput.readthedocs.io/en/latest/keyboard.html\n最后 效果 ","date":"2022-12-12T00:00:00Z","image":"https://thankful-water-038154a00.2.azurestaticapps.net/post/superpaste/%E5%B0%81%E9%9D%A2_hud6952016226169985b8ba3953ba2dfee_281431_120x120_fill_box_smart1_3.png","permalink":"https://thankful-water-038154a00.2.azurestaticapps.net/post/superpaste/","title":"超级粘贴"},{"content":"pyTranscriber 引言 你有没有过需要视频生成字幕的需求但是网上的转换都是收费的？今天我将介绍一个神器pyTranscriber能够免费生成视频字幕\n安装步骤 注意，你可能需要一定的Python cmd git知识\n首先你需要下载项目(推荐使用git clone) https://github.com/raryelcostasouza/pyTranscriber 你需要安装Python(勾选上 add to path) https://www.python.org/ 请打开cmd，cd到项目的目录中 输入pip install -r requirement.txt安装依赖 输入python main.py打开项目 你也可以使用虚拟Python环境安装软件，如poetry\n使用教程 生成字幕文件 首先打开软件是英文页面，点击标题栏上language按钮选择简体中文 再点击旁边的setting选项，设置好一个能连接上Google的代理(点击test可以测试连接可用性) 之后选择文件和视频的语言(原视频是什么语言就选什么语言) 点击生成字幕之后耐心等待 最后你会得到srt和txt文件 到这里就已经结束了，请享用你的字幕吧\n翻译 翻译网站 如果你还想翻译字幕，推荐你使用字幕翻译网站 https://translatesubtitles.com/\n上传字幕文件，然后选择翻译然后下载下来 当然你也可以使用有道翻译等国内翻译软件 （有道翻译有大学生免费翻译文档）\n有道翻译 将srt以文本打开，复制一份到word文档\n将word文档上传翻译，再复制内容回srt保存\n结果 (这是选择两份字幕的最终效果)\n","date":"2022-12-01T00:00:00Z","image":"https://thankful-water-038154a00.2.azurestaticapps.net/post/pytranscriber/%E4%B8%BB%E9%A1%B5%E9%9D%A2_hu0e7064b61b51e2972b73936a53bd37f9_1627172_120x120_fill_box_smart1_3.png","permalink":"https://thankful-water-038154a00.2.azurestaticapps.net/post/pytranscriber/","title":"视频字幕神器pyTranscriber"},{"content":"网站涉及的相关 网站设计 首先我使用了Hugo这个网站框架并且配上了stack主题\n网站搭建 将网站搭建在GitHub Pages上\n还使用了Azure的静态web解析，相当于有两个域名了\n网站编辑 我使用Obsidian进行博客网站的编辑，他支持Markdown语言，并且拥有模板。\n本来是向用Visual Studio Code 进行编辑的，这样还可以做到编译和发布all in one，但是考虑到模板和文件内容整理问题，我还是使用了Obsidian\n同时我编辑的内容也通过OneDrive同步到云端，这样也不用担心数据丢失的问题\n网站更新 使用Hugo编译好网站之后用git将写好的内容push到远程仓库里，这样就能够实现更新博客内容\n总结 这次建设网站没有花我一分钱，域名啥的我也没有购买。\n我觉得这是非常适合我这穷学生的建设网站的方式。如果有兴趣的话我也可以出一篇详细的建设教程。\n","date":"2022-11-24T00:00:00Z","permalink":"https://thankful-water-038154a00.2.azurestaticapps.net/post/website-software/","title":"我网站使用的一些东西"},{"content":"世界是事实的总和，而非物的总和 我们观察的不可能是超越时间的、不变的“物” 实无穷与潜无穷 排中律 世界是无限的 当用“非A”代替“B”时，其逻辑依然是“A或非A”为真的条件是“A为真”或“非A”为真，而不能说“A或非A”这个命题恒为真。 世界是有限的 保证了A和非A构成一个整体 “真的意义” 当命题表达了实际情况时，命题就是“真”的；否则命题就是表达了非实际情况，也就是“假”的。维特根斯坦用这个命题将世界的“真”锁定在过去和当下中。 两类逻辑 “逻辑必然的数学推理”和“逻辑不必然的力学推理” 维特根斯坦通过这个命题（1.13逻辑空间中的事实是世界）区分了“数学的逻辑”和“力学的逻辑” 数学的每一个定理和推论都是公理的同义反复或者是公理的矛盾命题，这类命题要不是必然的，要不是不可能的，它们的“真、假”在逻辑上是必然的，但是也没有告诉人们新的知识。而力学的逻辑，或者说物理命题的“真假”是由它们是否与事实一致进行判断的。 逻辑空间中的“事实”是物理命题，而逻辑空间中的“非事实”则是纯形式化的逻辑命题。 世界是可还原的 使用还原论去认识世界 一个基本组成成分和另一个相互独立，互不影响 与还原论相对的是整体论或系统论，就是把复杂系统看着是一个整体 世界之内与世界之外 世界是所有基本事态的存在 “物的可能状态”只有在实际发生后，才进入世界之内。而“物的可能状态”没有实际发生，那么就是在世界之外。 ","date":"2022-11-24T00:00:00Z","image":"https://thankful-water-038154a00.2.azurestaticapps.net/post/wittgenstein/note_hub3861a2fc8a714cba5025c698d818fe3_288583_120x120_fill_q75_box_smart1.jpg","permalink":"https://thankful-water-038154a00.2.azurestaticapps.net/post/wittgenstein/","title":"维特根斯坦"}]