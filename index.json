[{"content":" ","date":"19 October 2023","permalink":"/","section":"","summary":" ","title":""},{"content":" 西方哲学十五讲笔记 # 杂谈 # 为什么我会想要学习西方哲学？很大一部分还是素晴日给我的冲击，让我去了解了维特根斯坦的思想，特别是他的语言哲学方面的成就，对我的三观的重塑，让我以一种新的视角去认识世界。这份喜悦就好比哥伦布发现新大陆一样。从而萌生出了对哲学的的兴趣。其实我之前在高中学习马哲的时候，曾经也认为这十分的对，天天去分什么唯心主义和唯物主义的。确实马哲是很好的思想。他过于正确，正确到我甚至我当时觉得这就是真理。但自从我了解完维特根斯坦的思想后，我才意识到，如果只有马哲，那么我觉得整个世界是是无趣的，我不喜欢。对于我在学校学习的哲学（非哲学专业），我觉得这根本算不上哲学，应该把哲学二字去除。真是误人子弟。哲学是一门自由的学科，学习哲学就应该自己去思考去阅读著作，去和伟大的人物去对话，自己去树立自己的三观。而不是单单的为了服务你这门哲学，而去跟毫无哲学底子的人去对比别的哲学。对比是没错，但是你有仔细阅读其他人的著作并思考吗？为什么你会相信一个陌生人写的东西就是哲学家思想的全部内容呢？当然，我也不是说对哲学家思想的解读全是错误的，但是我认为尽量还原一个哲学家思想思路的作品，尽力去描述哲学家思想的作品才是好的二创作品。哲学不是一门讲大道理的学科，而是思考的活动过程。如果只是寥寥几句就概括了以往的哲学，这对于之前的哲学来说一点都不公平。当初的我对形而上学的印象就是被灌输着孤立，机械，片面的。可事实上你真的了解形而上学吗？西方花了几百年上千年研究的主题真的就被这三个词语所概括吗？真的如他所描述的三个词那样那么无趣吗？任何一门哲学都无法代表整个哲学。\n所以现在我想要从西方哲学开始的地方——古希腊哲学开始，一步一步慢慢了解哲学，明白哲学家所争论的到底是什么，不同时期哲学研究的对象是什么，为什么哲学发展成了今天这个样子……在学习的过程中能够给与我对世界新的认识。\n以下笔记存在的目的在于我能够快速回忆起之间所学的内容，所以请你先阅读本书后再观看。欢迎指出错误\n痛苦的智慧 # 伊甸园的神话中，我们可以了解到\n人类最透彻的痛苦是智慧，认识到死亡 人不能忍受一个无价值的世界，因而人通过赋予价值，而最高的价值为终极关怀，价值对抗虚无主义\n全能全知全善的上帝纵容亚当的罪，说明了人是自由的。这种自由不是人凭他自己就可以违背上帝的意志，而是上帝赋予了人违背他意志的自由。 人的自由终究不是上帝那创造的自由，而是给予了人选择的自由 人是某种尚未定型的，永远开放的存在，因而他的至高无上的终极理想本身也一定是一种尚未定型的，永远开放的对象。爱智慧源于人的本性，这是人必经的痛苦，方才成其为人。人成其为人==\u0026gt;人是人的未来\n希腊哲学的诞生 # p25-p27 # 克里特-迈锡尼文化 伯里克利关于民主的发言 城邦制度的民主自由==\u0026gt;足够闲暇==\u0026gt;语言的力量 人类社会秩序投射到自然 p28-p31 # 希腊人开始思考哲学的时候，没有抽象的概念可以使用 希腊哲学主题是获得关于宇宙万物的必然性或规律知识 命运与必然性《俄底浦斯》 苏格拉底：自知无知是有智慧的体现 希腊哲学的经验主义==\u0026gt;为了解决问题，拯救现象 此现象非与本质对立的现象，而是对人所显现出来的一切事物，现象之外别无他物 解释现象==\u0026gt;用现象解释现象==\u0026gt;自然哲学（宇宙论） p32 # 从自然认识自己==\u0026gt;人与自然同质同构（自然是大宇宙，人是小宇宙） 为什么==\u0026gt;为什么存在着东西存在，而不是归于虚无==\u0026gt;万物聚合而成的自然没有因为万物的生灭变化而毁灭，而是对我们表现为永恒的循环（如四季）==\u0026gt;本原的产生 p35 # 泰勒斯 观察天象，不留神掉进沟里 米利都学派（泰勒斯）==\u0026gt;大地浮在水上==\u0026gt;水：流动性/易变性/可塑性/生命原始，正是化生万物的本原==\u0026gt;无定形 p36 # 赫拉克利特 万物本原：火==\u0026gt;运动变化永恒==\u0026gt;按一定分寸燃烧，按一定分寸熄灭==\u0026gt;变化有一定的尺度，这个规范万物变化尺度是逻各斯==\u0026gt;大体上就是规律 p37 # 巴门尼德：静止不动，存在是一 赫拉克利特：运动变化，万物是多 巴门尼德\n真理之路==\u0026gt;存在==\u0026gt;普遍必然知识（类似本质）\n意见之路==\u0026gt;非存在==\u0026gt;个人而异==\u0026gt;既存在又不存在==\u0026gt;非知识（类似现象）\n巴门尼德：逻辑上在先的本质==\u0026gt;存在\n知识必须从一个无疑的东西出发\n知识是存在的，必须有一个立足点==\u0026gt;无穷后退不可能\n知识是可能的==\u0026gt;无穷后退是不可能的\np38 # 巴门尼德：只有存在能够被思想和述说，非存在不能被思想，也不能被述说==\u0026gt;凡是能够思想和述说的就一点存在==\u0026gt;思维与存在的同一性\n思维思辨：认识无非是要达到与对象的同一性，而这个同一性在感觉经验中是无论如何也不可能获得的，只能在思想或理性认识中存在其根据\n西方哲学的基本思维：通过理性的方式认识万物的本质\n","date":"19 October 2023","permalink":"/notes/westernphilosophy/","section":"Notes","summary":"西方哲学十五讲笔记 # 杂谈 # 为什么我会想要学习西方哲学？很大一部分还是素晴日给我的冲击，让我去了解了维特根斯坦的思想，特别是他的语言哲学方面的成就，对我的三观的重塑，让我以一种新的视角去认识世界。这份喜悦就好比哥伦布发现新大陆一样。从而萌生出了对哲学的的兴趣。其实我之前在高中学习马哲的时候，曾经也认为这十分的对，天天去分什么唯心主义和唯物主义的。确实马哲是很好的思想。他过于正确，正确到我甚至我当时觉得这就是真理。但自从我了解完维特根斯坦的思想后，我才意识到，如果只有马哲，那么我觉得整个世界是是无趣的，我不喜欢。对于我在学校学习的哲学（非哲学专业），我觉得这根本算不上哲学，应该把哲学二字去除。真是误人子弟。哲学是一门自由的学科，学习哲学就应该自己去思考去阅读著作，去和伟大的人物去对话，自己去树立自己的三观。而不是单单的为了服务你这门哲学，而去跟毫无哲学底子的人去对比别的哲学。对比是没错，但是你有仔细阅读其他人的著作并思考吗？为什么你会相信一个陌生人写的东西就是哲学家思想的全部内容呢？当然，我也不是说对哲学家思想的解读全是错误的，但是我认为尽量还原一个哲学家思想思路的作品，尽力去描述哲学家思想的作品才是好的二创作品。哲学不是一门讲大道理的学科，而是思考的活动过程。如果只是寥寥几句就概括了以往的哲学，这对于之前的哲学来说一点都不公平。当初的我对形而上学的印象就是被灌输着孤立，机械，片面的。可事实上你真的了解形而上学吗？西方花了几百年上千年研究的主题真的就被这三个词语所概括吗？真的如他所描述的三个词那样那么无趣吗？任何一门哲学都无法代表整个哲学。\n所以现在我想要从西方哲学开始的地方——古希腊哲学开始，一步一步慢慢了解哲学，明白哲学家所争论的到底是什么，不同时期哲学研究的对象是什么，为什么哲学发展成了今天这个样子……在学习的过程中能够给与我对世界新的认识。\n以下笔记存在的目的在于我能够快速回忆起之间所学的内容，所以请你先阅读本书后再观看。欢迎指出错误\n痛苦的智慧 # 伊甸园的神话中，我们可以了解到\n人类最透彻的痛苦是智慧，认识到死亡 人不能忍受一个无价值的世界，因而人通过赋予价值，而最高的价值为终极关怀，价值对抗虚无主义\n全能全知全善的上帝纵容亚当的罪，说明了人是自由的。这种自由不是人凭他自己就可以违背上帝的意志，而是上帝赋予了人违背他意志的自由。 人的自由终究不是上帝那创造的自由，而是给予了人选择的自由 人是某种尚未定型的，永远开放的存在，因而他的至高无上的终极理想本身也一定是一种尚未定型的，永远开放的对象。爱智慧源于人的本性，这是人必经的痛苦，方才成其为人。人成其为人==\u0026gt;人是人的未来\n希腊哲学的诞生 # p25-p27 # 克里特-迈锡尼文化 伯里克利关于民主的发言 城邦制度的民主自由==\u0026gt;足够闲暇==\u0026gt;语言的力量 人类社会秩序投射到自然 p28-p31 # 希腊人开始思考哲学的时候，没有抽象的概念可以使用 希腊哲学主题是获得关于宇宙万物的必然性或规律知识 命运与必然性《俄底浦斯》 苏格拉底：自知无知是有智慧的体现 希腊哲学的经验主义==\u0026gt;为了解决问题，拯救现象 此现象非与本质对立的现象，而是对人所显现出来的一切事物，现象之外别无他物 解释现象==\u0026gt;用现象解释现象==\u0026gt;自然哲学（宇宙论） p32 # 从自然认识自己==\u0026gt;人与自然同质同构（自然是大宇宙，人是小宇宙） 为什么==\u0026gt;为什么存在着东西存在，而不是归于虚无==\u0026gt;万物聚合而成的自然没有因为万物的生灭变化而毁灭，而是对我们表现为永恒的循环（如四季）==\u0026gt;本原的产生 p35 # 泰勒斯 观察天象，不留神掉进沟里 米利都学派（泰勒斯）==\u0026gt;大地浮在水上==\u0026gt;水：流动性/易变性/可塑性/生命原始，正是化生万物的本原==\u0026gt;无定形 p36 # 赫拉克利特 万物本原：火==\u0026gt;运动变化永恒==\u0026gt;按一定分寸燃烧，按一定分寸熄灭==\u0026gt;变化有一定的尺度，这个规范万物变化尺度是逻各斯==\u0026gt;大体上就是规律 p37 # 巴门尼德：静止不动，存在是一 赫拉克利特：运动变化，万物是多 巴门尼德","title":"【持续更新中】西方哲学十五讲笔记"},{"content":"","date":"19 October 2023","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"这里专门用来储存一些我的笔记\n","date":"19 October 2023","permalink":"/notes/","section":"Notes","summary":"这里专门用来储存一些我的笔记","title":"Notes"},{"content":"","date":"19 October 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"19 October 2023","permalink":"/categories/%E7%AC%94%E8%AE%B0/","section":"Categories","summary":"","title":"笔记"},{"content":"","date":"19 October 2023","permalink":"/tags/%E5%93%B2%E5%AD%A6/","section":"Tags","summary":"","title":"哲学"},{"content":"","date":"15 October 2023","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"15 October 2023","permalink":"/tags/%E5%A4%A7%E5%AD%A6%E7%94%9F/","section":"Tags","summary":"","title":"大学生"},{"content":" 大学生生存指南——网课 # 前言 # 在我读大一的时候，疫情还未结束，我们还处于网课阶段。现在网课结束了，但是那种水网课依然还在。这些课程存在的必要性真的有吗，真的有人去看？对我而言，这些课程十分的浪费时间，要是你对某个领域感兴趣的话，不如上B站，上Youtube去自己寻找课程观看，还有许多入门视频推荐。现在我看依然有很多人不知道怎么刷课，或者是找别人代刷。所以我写这篇文章，大体的教你如何应对网课\n刷课 # 在我的学校目前只有超星平台和智慧树平台，所以我以这两个平台为演示\nOCS网课助手 # OCS官网\n这是一个很强大的网课助手，支持多个平台，而且有自己的客户端和油猴脚本都可以用 不过目前（2023.10.15）在智慧树平台上，由于检测升级，所以只能用客户端，超星还是两者都可以用的。所以我分客户端和油猴脚本演示，二选一即可。\n网页脚本 # 这里我推荐使用FireFox浏览器，因为安装插件的时候，FireFox是直接可以访问插件商店的，如果使用Chrome需要能访问Google\n安装 油猴插件 安装 OCS脚本 然后打开你的网课页面就开始刷了。\n客户端 # 到 官网下载客户端，安装完成后打开，创建一个浏览器并运行\n然后登录超星/智慧树，进入你要刷的课程页面，会有弹窗，最好开启自动调整窗口大小。正常的话他会一直刷下去，除非出现验证码。如果有平时分的话可以开启定时。\n答题 # 在这里我推荐两个\nOCS # OCS不仅能刷课，答题也是可以的，但是需要自己购买题库并且配置。官方推荐的一个付费题库 言溪题库\n价格 # 虽然说是付费题库，但是基本上很便宜，按次数来算的。新用户送100次查询额度。目前（2023.10.15）的价格是\n1块钱100次 3块钱2k次 10块钱1w次 50块10w次 教程 # 首先登录自己的爱发电用户，没有的可以用手机注册一个\n登录后可以在主页面看到如下内容，点击题库配置右边的复制按钮 回到OCS弹窗中点击通用-全局设置-点击配置，在弹出的页面中粘贴刚刚复制的内容后点击确定 OK现在就会自动答题了，而且支持考试自动答题。\n智慧树的配置同理，我就不演示了。\n题海 # 题海官网\n题海也是付费题库，免费次数有限但我没有怎么测试过具体数字，官方也没说具体数字。题海分为网页端（划词搜索）和APP\n网页端 # 和之前脚本安装一样\n安装 油猴插件 安装 题海脚本 之后在超星或者智慧树划词，点击右下角图标，会弹出窗口让你扫描二维码，用微信扫描即可。 日后可以在设置里面设置划词直接搜题，加快搜题效率。\nAPP # 官网下载APP安装后打开\n然后在我的页面里有快捷搜题助手，点击后给予相应权限即可实现在屏幕上直接搜题，不需要手动截图去搜题，十分方便。 最后 # 以上就是我常使用的网课工具，如果你有什么更好的工具或者是方案，欢迎在评论补充\n","date":"15 October 2023","permalink":"/posts/onlinecourse/","section":"Posts","summary":"大学生生存指南——网课 # 前言 # 在我读大一的时候，疫情还未结束，我们还处于网课阶段。现在网课结束了，但是那种水网课依然还在。这些课程存在的必要性真的有吗，真的有人去看？对我而言，这些课程十分的浪费时间，要是你对某个领域感兴趣的话，不如上B站，上Youtube去自己寻找课程观看，还有许多入门视频推荐。现在我看依然有很多人不知道怎么刷课，或者是找别人代刷。所以我写这篇文章，大体的教你如何应对网课\n刷课 # 在我的学校目前只有超星平台和智慧树平台，所以我以这两个平台为演示\nOCS网课助手 # OCS官网\n这是一个很强大的网课助手，支持多个平台，而且有自己的客户端和油猴脚本都可以用 不过目前（2023.10.15）在智慧树平台上，由于检测升级，所以只能用客户端，超星还是两者都可以用的。所以我分客户端和油猴脚本演示，二选一即可。\n网页脚本 # 这里我推荐使用FireFox浏览器，因为安装插件的时候，FireFox是直接可以访问插件商店的，如果使用Chrome需要能访问Google\n安装 油猴插件 安装 OCS脚本 然后打开你的网课页面就开始刷了。\n客户端 # 到 官网下载客户端，安装完成后打开，创建一个浏览器并运行\n然后登录超星/智慧树，进入你要刷的课程页面，会有弹窗，最好开启自动调整窗口大小。正常的话他会一直刷下去，除非出现验证码。如果有平时分的话可以开启定时。\n答题 # 在这里我推荐两个","title":"大学生生存指南——网课"},{"content":"","date":"15 October 2023","permalink":"/categories/%E6%95%99%E7%A8%8B/","section":"Categories","summary":"","title":"教程"},{"content":"","date":"15 October 2023","permalink":"/tags/%E7%BD%91%E8%AF%BE/","section":"Tags","summary":"","title":"网课"},{"content":"","date":"26 September 2023","permalink":"/tags/%E7%B9%81%E4%BD%93%E4%B8%AD%E6%96%87/","section":"Tags","summary":"","title":"繁体中文"},{"content":"","date":"26 September 2023","permalink":"/categories/%E6%8A%80%E5%B7%A7/","section":"Categories","summary":"","title":"技巧"},{"content":"","date":"26 September 2023","permalink":"/tags/%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87/","section":"Tags","summary":"","title":"简体中文"},{"content":" 前言 # 在使用Whisper进行语音转换的同时，不知道咋的抽风给我生成繁体中文，虽然很容易就能在网上找到简繁转换的工具，但我还是打算自己写一个\n准备 # 在这里我使用python进行编写，使用opencc这个库进行简繁的转换。\nopencc # opencc是一款强大的汉字转换的开源项目，支持中文简繁转换，支持词汇级别的转换、异体字转换和地区习惯用词转换\n编写 # 直接开始造\n繁体中文转简体中文（Traditional Chinese to Simplified Chinese）简称t2s\nimport opencc import sys import re if len(sys.argv)==1: filenames=input(\u0026#34;请拖入文件\u0026#34;).replace(\u0026#34;\\\\\u0026#34;,\u0026#34;/\u0026#34;) filenames=re.findall(r\u0026#39;(?\u0026lt;=\u0026#34;).*?(?=\u0026#34;)\u0026#39;,filenames) filenames.remove(\u0026#34; \u0026#34;) elif len(sys.argv)\u0026gt;1: filenames = sys.argv[1:] for filename in filenames: with open(filename,\u0026#34;r\u0026#34;,encoding=\u0026#39;utf-8\u0026#39;) as f: data=f.read() converter=opencc.OpenCC(\u0026#34;t2s.json\u0026#34;) result=converter.convert(data) with open(filename,\u0026#34;w\u0026#34;,encoding=\u0026#39;utf-8\u0026#39;) as f: f.write(result) print(filename) input(\u0026#34;- - -转换完成- - -\u0026#34;) 简体中文转繁体中文（Simplified Chinese to Traditional Chinese）简称s2t\n...... converter=opencc.OpenCC(\u0026#34;s2t.json\u0026#34;) ...... 最后通过pyinstaller打包即可\npyinstaller -F main.py 代码我也上传到了我的GitHub上\nhttps://github.com/ohdmire/convert_sc-tc\nOhdmire/convert_sc-tc 简体繁体转换 HTML 0 0 遇到的坑 # 路径问题 # 首先是这个windows的路径问题，我拖入的文件无法直接被python识别，必须按格式把\u0026quot;\u0026quot;去掉，还得把\\转换成/\n拖入多个文件时，得通过正则表达式提取出\u0026quot;\u0026quot;之内的路径，然后转换为列表\n传入参数 # 想让文件拖到图标上就能执行，要了解sys.argv可以获取传入的参数值，返回值是列表\n编码问题 # 传入的文件有可能被误认为是gbk编码，我们需要手动强制编码为utf-8\nencoding=\u0026#39;utf-8\u0026#39; 使用教程 # t2s.exe 是繁体中文转简体中文\ns2t.exe 是简体中文转繁体中文\n将文件拖到该程序的图标上进行转换 # 打开程序后将文件拖入后回车进行转换 # 最后 # 效果展示\n参考链接 # opencc\n","date":"26 September 2023","permalink":"/posts/t2s-s2t/","section":"Posts","summary":"前言 # 在使用Whisper进行语音转换的同时，不知道咋的抽风给我生成繁体中文，虽然很容易就能在网上找到简繁转换的工具，但我还是打算自己写一个\n准备 # 在这里我使用python进行编写，使用opencc这个库进行简繁的转换。\nopencc # opencc是一款强大的汉字转换的开源项目，支持中文简繁转换，支持词汇级别的转换、异体字转换和地区习惯用词转换\n编写 # 直接开始造\n繁体中文转简体中文（Traditional Chinese to Simplified Chinese）简称t2s\nimport opencc import sys import re if len(sys.argv)==1: filenames=input(\u0026#34;请拖入文件\u0026#34;).replace(\u0026#34;\\\\\u0026#34;,\u0026#34;/\u0026#34;) filenames=re.findall(r\u0026#39;(?\u0026lt;=\u0026#34;).*?(?=\u0026#34;)\u0026#39;,filenames) filenames.remove(\u0026#34; \u0026#34;) elif len(sys.","title":"使用opencc进行简繁转换"},{"content":"","date":"23 September 2023","permalink":"/tags/bitwarden/","section":"Tags","summary":"","title":"bitwarden"},{"content":" bitwarden # 介绍 # Bitwarden是一款自由且开源的密码管理服务，用户可在加密的保管库中存储敏感信息。Bitwarden平台提供有多种客户端应用程序，包括网页用户界面、桌面应用，浏览器扩展、移动应用以及命令行界面。Bitwarden提供云端托管服务，并支持自行部署解决方案。\nbitwarden的优势在于跨平台，和自建云托管服务器，相比起Chrome或Firefox的密码保存来说，提供了更为可靠的安全性\n准备 # 域名一个 vps（最好是Linux） ssl证书 Onedrive账号（可选） 搭建服务 # 域名解析与ssl证书 # 这个比较基础所以我放在一起了。\n域名解析 # 首先你要从域名提供商购买域名（免费域名有eu.org但是申请时间很长），如果你有github学生包的话，你可以免费获取一年的.me域名\n然后选择一个域名解析的服务商（比如cloudflare），在域名提供商的设置页面将域名解析的地址指向域名解析的服务商\n最后你访问域名就能跳到ip地址了\n如果这部分内容还是不理解的话，请自行百度\nssl证书 # 推荐使用acme.sh获取证书\nacme.sh的wiki\nwiki上也详细讲述了安装教程我就不再多说\n推荐使用这条命令来获取域名。其中mydomain2.com 换成已经完成解析的域名\nacme.sh --issue -d mydomain2.com --dns dns_dp 提示：如果未能完成验证请检查防火墙状态并释放80端口\n通过docker安装bitwarden # 首先你需要安装docker，详细的教程我也不再多说\ndocker的安装教程\n以Ubuntu为例\nsudo apt get install docker bitwarden镜像的选择 # bitwarden拥有官方镜像和第三方镜像(vaultwarden)两种，第三方镜像的优势在于占用比较小，而且支持premium功能。我使用的是第三方镜像\nvaultwarden\ndocker pull vaultwarden/server:latest docker run -d --name vaultwarden -v /vw-data/:/data/ --restart unless-stopped -p 80:80 vaultwarden/server:latest 可以看到:的前后代表的分别是对容器外的和对容器内的，/vw-data/ 是你相关账户数据的储存路径，只要这个文件没丢，你的账户和密码都在。第一个80是对外的端口（意思就是你能通过访问ip:端口直接访问到的），第二个80端口是对容器内的（一般不能更改，容器预先设定好的）。\n个人推荐是如果你有一些web服务，我推荐你不要占用80端口，可以改成其他端口\n输入完成后其实就已经部署完毕了，你可以试试访问ip:端口，就可以进入页面了\n为bitwarden添加ssl证书 # bitwarden必须使用https才能够使用，使用我们要为我们的服务加上ssl证书\n刚刚已经申请过的证书我们可以使用命令导出\nacme.sh --install-cert -d example.com \\ --cert-file /path/to/certfile/in/apache/cert.pem \\ --key-file /path/to/keyfile/in/apache/key.pem \\ 其中example.com是你刚刚申请的域名\n/path/to/certfile/in/apache/cert.pem是你的证书文件\n/path/to/keyfile/in/apache/key.pem是你的密钥\n输入后会在该路径生成你的证书与密钥\n使用Caddy反代来实现https # 安装caddy的过程请跟文档走\nCaddy\n以Ubuntu为例\nsudo apt install -y debian-keyring debian-archive-keyring apt-transport-https curl -1sLf \u0026#39;https://dl.cloudsmith.io/public/caddy/stable/gpg.key\u0026#39; | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg curl -1sLf \u0026#39;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt\u0026#39; | sudo tee /etc/apt/sources.list.d/caddy-stable.list sudo apt update sudo apt install caddy 安装完成后请新建立一个Caddyfile文件 编辑为以下内容\nexample.com { tls cert.pem key.pem reverse_proxy 127.0.0.1:80 } 其中example.com是你的域名\ncert.pem 和 key.pem是你的证书和密钥文件（请使用绝对路径）\n127.0.0.1:80的80是刚刚容器对外的端口\n然后在该目录下输入\ncaddy start 之后直接输入域名就能访问 bitwarden导入密码 # 在开始使用之前，相信你以前使用过其他密码管理器，bitwarden提供了多种密码导入\n访问你部署的bitwarden网页，选择工具-导入数据 bitwarden的官方文档中写明了支持的密码格式\n1Password (1pif)\n1Password 6 \u0026amp; 7 Windows (.sv)\n1Password 6 \u0026amp; 7 Mac (csv)\n1Password (1pux)\nAscendo DataVault (csv)\nAvast Passwords (csv)\nAvast Passwords (json)\nAvira (json)\nBlackBerry Password Keeper (csv)\nBlur (csv)\nBrave (csv)\nButtercup (csv)\nChrome (csv)\nClipperz (html)\nCodebook (csv)\nDashlane (json)\nDashlane (csv)\nEncryptr (csv)\nEnpass (csv)\nEnpass (json)\nFirefox (csv)\nF-Secure KEY (fsk)\nGNOME Passwords and Keys/Seahorse (json)\nKaspersky Password Manager (txt)\nKeePass 2 (xml)\nKeePassX (csv)\nKeeper (csv)\nLastPass (csv)\nLogMeOnce (csv)\nMeldium (csv)\nmSecure (csv)\nMyki (csv)\nMicrosoft Edge (Chromium) (csv)\nNordpass (csv)\nOpera (csv)\nPadlock (csv)\nPassbolt (csv)\nPassKeep (csv)\nPassky (json)\nPassman (json)\nPasspack (csv)\nPassword Agent (csv)\nPassword Boss (json)\nPassword Dragon (xml)\nPassword Safe (xml)\nPasswordWallet (txt)\nProtonPass (json)\nPsono (json)\nRememBear (csv)\nRoboForm (csv)\nSafeInCloud (xml)\nSaferPass (csv)\nSecureSafe (csv)\nSplashID (csv)\nSticky Password (xml)\nTrue Key (csv)\nUniversal Password Manager (csv)\nVivaldi (csv)\nYoti (csv)\nZoho Vault (csv)\nbitwarden的使用 # 在登陆页面中选择自托管，填入你的域名即可 Android端 # 通过Google play下载bitwarden的客户端\nWindows端 # https://bitwarden.com/download/\n选择Windows客户端下载\nFirefox or Chrome浏览器 # 下载扩展插件\nFirefox: https://addons.mozilla.org/zh-CN/firefox/addon/bitwarden-password-manager/\nChrome: https://chrome.google.com/webstore/detail/bitwarden-free-password-m/nngceckbapebfimnlniiiahkandclblb\nbitwarden的备份 # 由于密码是加密储存在云端的，要是哪天云服务器没了，虽然本地还可以导出，但我还是推荐定期备份\n手动备份 # 访问你部署的bitwarden网页，选择工具-导出密码库-确认格式\n可以选择json和csv两种格式\njson格式支持加密 自动备份 # 通过项目vaultwarden-backup进行备份\nvaultwarden-backup\ndocker-compose的方法适合没有使用过容器的用户，由于我们已经自行创建过了容器，所以我们采用自动备份。我的方案是备份到OneDrive\nOneDrive # 通过Azure获取必要信息 # 进入Azure的应用注册，点击新注册\nAzure的应用注册\n注册应用程序，名称填写BitwardenBackup 受支持的帐户类型选择最长的那个，重定向URI选web填http://localhost点击注册 注册好后复制客户端ID（待会要用到） 点击证书与密码-新客户端密码-填写说明，截止期限可以拉到最大，然后添加 添加完成后复制密码值 到此，你已经获取了客户端ID和密码值\n配置rclone # 输入以下指令\ndocker run --rm -it \\ --mount type=volume,source=vaultwarden-rclone-data,target=/config/ \\ ttionya/vaultwarden-backup:latest \\ rclone config 按照步骤配置\nNo remotes found, make a new one? n) New remote s) Set configuration password q) Quit config n/s/q\u0026gt; n #新建配置 Enter name for new remote. name\u0026gt; BitwardenBackup Option Storage. Type of storage to configure. Choose a number from below, or type in your own value. 1 / 1Fichier \\ (fichier) 2 / Akamai NetStorage \\ (netstorage) 3 / Alias for an existing remote \\ (alias) 4 / Amazon Drive \\ (amazon cloud drive) 5 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, ArvanCloud, Ceph, China Mobile, Cloudflare, GCS, DigitalOcean, Dreamhost, Huawei OBS, IBM COS, IDrive e2, IONOS Cloud, Leviia, Liara, Lyve Cloud, Minio, Netease, Petabox, RackCorp, Scaleway, SeaweedFS, StackPath, Storj, Synology, Tencent COS, Qiniu and Wasabi \\ (s3) 6 / Backblaze B2 \\ (b2) 7 / Better checksums for other remotes \\ (hasher) 8 / Box \\ (box) 9 / Cache a remote \\ (cache) 10 / Citrix Sharefile \\ (sharefile) 11 / Combine several remotes into one \\ (combine) 12 / Compress a remote \\ (compress) 13 / Dropbox \\ (dropbox) 14 / Encrypt/Decrypt a remote \\ (crypt) 15 / Enterprise File Fabric \\ (filefabric) 16 / FTP \\ (ftp) 17 / Google Cloud Storage (this is not Google Drive) \\ (google cloud storage) 18 / Google Drive \\ (drive) 19 / Google Photos \\ (google photos) 20 / HTTP \\ (http) 21 / Hadoop distributed file system \\ (hdfs) 22 / HiDrive \\ (hidrive) 23 / In memory object storage system. \\ (memory) 24 / Internet Archive \\ (internetarchive) 25 / Jottacloud \\ (jottacloud) 26 / Koofr, Digi Storage and other Koofr-compatible storage providers \\ (koofr) 27 / Local Disk \\ (local) 28 / Mail.ru Cloud \\ (mailru) 29 / Mega \\ (mega) 30 / Microsoft Azure Blob Storage \\ (azureblob) 31 / Microsoft OneDrive \\ (onedrive) 32 / OpenDrive \\ (opendrive) 33 / OpenStack Swift (Rackspace Cloud Files, Blomp Cloud Storage, Memset Memstore, OVH) \\ (swift) 34 / Oracle Cloud Infrastructure Object Storage \\ (oracleobjectstorage) 35 / Pcloud \\ (pcloud) 36 / PikPak \\ (pikpak) 37 / Proton Drive \\ (protondrive) 38 / Put.io \\ (putio) 39 / QingCloud Object Storage \\ (qingstor) 40 / Quatrix by Maytech \\ (quatrix) 41 / SMB / CIFS \\ (smb) 42 / SSH/SFTP \\ (sftp) 43 / Sia Decentralized Cloud \\ (sia) 44 / Storj Decentralized Cloud Storage \\ (storj) 45 / Sugarsync \\ (sugarsync) 46 / Transparently chunk/split large files \\ (chunker) 47 / Union merges the contents of several upstream fs \\ (union) 48 / Uptobox \\ (uptobox) 49 / WebDAV \\ (webdav) 50 / Yandex Disk \\ (yandex) 51 / Zoho \\ (zoho) 52 / premiumize.me \\ (premiumizeme) 53 / seafile \\ (seafile) Storage\u0026gt; 31 #选择OneDrive Option client_id. OAuth Client Id. Leave blank normally. Enter a value. Press Enter to leave empty. client_id\u0026gt; #刚刚获取的客户端ID Option client_secret. OAuth Client Secret. Leave blank normally. Enter a value. Press Enter to leave empty. client_secret\u0026gt; ##刚刚获取的密码值 Option region. Choose national cloud region for OneDrive. Choose a number from below, or type in your own string value. Press Enter for the default (global). 1 / Microsoft Cloud Global \\ (global) 2 / Microsoft Cloud for US Government \\ (us) 3 / Microsoft Cloud Germany \\ (de) 4 / Azure and Office 365 operated by Vnet Group in China \\ (cn) region\u0026gt; #默认回车即可 Edit advanced config? y) Yes n) No (default) y/n\u0026gt; #默认回车即可 Use web browser to automatically authenticate rclone with remote? * Say Y if the machine running rclone has a web browser you can use * Say N if running rclone on a (remote) machine without web browser access If not sure try Y. If Y failed, try N. y) Yes (default) n) No y/n\u0026gt; n #选择n Option config_token. For this to work, you will need rclone available on a machine that has a web browser available. For more help and alternate methods see: https://rclone.org/remote_setup/ Execute the following on the machine with the web browser (same rclone version recommended): rclone authorize \u0026#34;onedrive\u0026#34; \u0026#34;yourtoken\u0026#34; #复制这个命令去执行 Then paste the result. Enter a value. config_token\u0026gt; #填入一长串token Option config_type. Type of connection Choose a number from below, or type in an existing string value. Press Enter for the default (onedrive). 1 / OneDrive Personal or Business \\ (onedrive) 2 / Root Sharepoint site \\ (sharepoint) / Sharepoint site name or URL 3 | E.g. mysite or https://contoso.sharepoint.com/sites/mysite \\ (url) 4 / Search for a Sharepoint site \\ (search) 5 / Type in driveID (advanced) \\ (driveid) 6 / Type in SiteID (advanced) \\ (siteid) / Sharepoint server-relative path (advanced) 7 | E.g. /teams/hr \\ (path) config_type\u0026gt; #默认回车即可 Option config_driveid. Select drive you want to use Choose a number from below, or type in your own string value. Press Enter for the default (e3e0185b250b708d). 1 / (personal) \\ (e3e0185b250b708d) config_driveid\u0026gt; #默认回车即可 Drive OK? Found drive \u0026#34;root\u0026#34; of type \u0026#34;personal\u0026#34; URL: https://onedrive.live.com/?cid=e3e0185b250b708d y) Yes (default) n) No y/n\u0026gt; #默认回车即可 Configuration complete. Keep this \u0026#34;BitwardenBackup\u0026#34; remote? y) Yes this is OK (default) e) Edit this remote d) Delete this remote y/e/d\u0026gt; #默认回车即可 Current remotes: Name Type ==== ==== BitwardenBackup onedrive e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration password q) Quit config e/n/d/r/c/s/q\u0026gt; q #q退出 搭建在服务器的rclone token要在本地获取，请在电脑下载rclone后运行该指令或在手机上使用termux安装rclone然后运行该指令\ntermux # termux可以直接使用pkg安装\npkg install rclone 直接输入\nrclone.exe authorize \u0026#34;onedrive\u0026#34; \u0026#34;yourtoken\u0026#34; windows # windows下载二进制文件后按shift+右键在此处打开powershell输入\n./rclone.exe authorize \u0026#34;onedrive\u0026#34; \u0026#34;yourtoken\u0026#34; rclone.exe为你的程序名称\n会自动打开浏览器，登录你的Microsoft账号后接受认证后回到你的终端页面，会有一个token给你，复制后填入服务器上的终端内\n配置docker # 输入命令即可\ndocker run -d \\ --restart=always \\ --name vaultwarden_backup \\ --volumes-from=vaultwarden \\ --mount type=volume,source=vaultwarden-rclone-data,target=/config/ \\ -e DATA_DIR=\u0026#34;/data\u0026#34; \\ ttionya/vaultwarden-backup:latest 然后你就会在你的OneDrive里发现一个名叫BitwardenBackup的文件夹\n","date":"23 September 2023","permalink":"/posts/bitwarden/","section":"Posts","summary":"bitwarden # 介绍 # Bitwarden是一款自由且开源的密码管理服务，用户可在加密的保管库中存储敏感信息。Bitwarden平台提供有多种客户端应用程序，包括网页用户界面、桌面应用，浏览器扩展、移动应用以及命令行界面。Bitwarden提供云端托管服务，并支持自行部署解决方案。\nbitwarden的优势在于跨平台，和自建云托管服务器，相比起Chrome或Firefox的密码保存来说，提供了更为可靠的安全性\n准备 # 域名一个 vps（最好是Linux） ssl证书 Onedrive账号（可选） 搭建服务 # 域名解析与ssl证书 # 这个比较基础所以我放在一起了。\n域名解析 # 首先你要从域名提供商购买域名（免费域名有eu.org但是申请时间很长），如果你有github学生包的话，你可以免费获取一年的.me域名\n然后选择一个域名解析的服务商（比如cloudflare），在域名提供商的设置页面将域名解析的地址指向域名解析的服务商\n最后你访问域名就能跳到ip地址了\n如果这部分内容还是不理解的话，请自行百度\nssl证书 # 推荐使用acme.sh获取证书\nacme.sh的wiki\nwiki上也详细讲述了安装教程我就不再多说\n推荐使用这条命令来获取域名。其中mydomain2.com 换成已经完成解析的域名","title":"bitwarden使用docker自建服务器教程"},{"content":"","date":"23 September 2023","permalink":"/tags/%E5%AF%86%E7%A0%81/","section":"Tags","summary":"","title":"密码"},{"content":"","date":"12 June 2023","permalink":"/tags/e5/","section":"Tags","summary":"","title":"E5"},{"content":" E5 # 前言 # 本文大部分内容来自以下链接\n2023 最新白嫖Microsoft E5 ( Onedrive 5T ) 开发者账号教程\nE5 调用API续订服务：Microsoft 365 E5 Renew X\nE5简介 # Office365开发版E5是为开发人员提供的，是微软的官方活动，申请Office 365开发者计划可以获得为期3个月的免费Office365 E5。 而E5计划就包含了25个用于所有Office 365 应用的许可证\nE5的使用大体分为注册和续订两个部分\nE5注册 # 首先最好新注册一个Outlook的邮箱账号 这个账号将作为开发者\n进入 Microsoft 365 Developer Program 点击join now 按照模板填写下面信息\nCompany可以随意填写 选择个人项目 全部勾上 这里选择自定义沙盘 这里填写注意一下，username是管理员账号的名字，domain是域名的名字 填写手机号码然后接收短信 到此，你已经成为了e5计划的开发者，现在你可以使用刚刚创建的邮箱和密码登录微软的相关产品(OneDrive和Office365) （推荐）去除登录验证 # 打开 管理中心\n禁用安全默认值 创建新的E5子账户 # 刚刚注册的是管理员的账户XXXX@YYYY.onmicrosoft.com（大概是这个格式），当然，我们还可以往下注册15个用户，以用户的身份使用，这些用户都能享受Office365和OneDrive。所以我们也可以分享给其他人一起使用\n以管理员账户登录管理网址 链接\n添加用户 填写相关信息，名字随意 必须授予许可证（这样才有激活的Office365） 其他的默认即可\n这样你就有了一个子账号，这个账号第一次登录的时候会要求你重置默认密码，你可以将该账号分享给你的朋友 修改OneDrive空间 # 选择该用户点击OneDrive并Edit 修改为5TB E5续订 # E5续订的规则是你要在有效期内进行开发，大体也就是通过API的调用，这样你才会在大概到期前20-30天内获得续订的邮件 对于自动续订，可以使用Microsoft 365 E5 Renew Plus 如果你有一台服务器，你也可以使用Microsoft 365 E5 Renew X结合Docker在服务器上部署 我正好有GitHub学生包，拥有免费的Azure服务器，所以我打算使用Microsoft 365 E5 Renew X来续订。 Microsoft 365 E5 Renew X续订 # 部署十分简单，按照文档进行即可 Docker_Microsoft365_E5_Renew_X\n部署步骤 # 运行MS365 E5 Renew X镜像，得到容器。 docker run -d -p 1066:1066 -e TZ=Asia/Shanghai -e sender=\u0026#34;by123@163.com\u0026#34; -e pwd=\u0026#34;UNxxxxxxxxN\u0026#34; -e receiver=\u0026#34;4dddqqq9dd6@qq.com\u0026#34; -e adminpwd=\u0026#34;123456\u0026#34; hanhongyong/ms365-e5-renew-x:pubemail 修改-e后面的内容，其中 sender = \u0026lsquo; 123456@163.com\u0026lsquo;为发送邮件的邮箱。 receiver = \u0026lsquo; 789456@qq.com\u0026lsquo;为接收邮件的邮箱。其中pwd为发送邮箱的授权码。授权码获取方式为，进入网页版163邮箱，点击设置，点击POP3/SMTP/IMAP，点击授权密码管理，新增授权码即可。 adminpwd为web界面的登录密码。\n服务访问：输入ip:1066.\n登录后选择添加账号后我们会获得下面页面，下面页面的填写首先要获取必要信息 获取必要信息 # 应用注册 # 登录 Azure,以管理员账号登录XXXX@YYYY.onmicrosoft.com（大概是这个格式）\n登录完成后点击右上角的“门户”按钮进入Azure管理中心，在搜索栏内输入“应用注册”，点击进入 单击“新注册”按钮 配置应用 应用名称随意写、注意可访问性选项选择最后一项、重定向URL暂时不填 、完成后点击注册 配置应用重定向URL（身份验证） # 先点击“概述”，然后点击“添加重定向URL”，进入重定向URL配置界面，下图中的应用程序(客户端)ID即为\u0026quot;客户端ID\u0026quot; 点击“添加平台”，再点击“移动和桌面应用程序” 继续勾选中第一个URL，最后点击底部的“配置”，该URL为https://login.microsoftonline.com/common/oauth2/nativeclient也可手动添加。 配置默认客户端类型将应用程序视为公共客户端 点击切换按钮为“是” ，最后点击“保存”按钮保存。 两种API调用方式 # 小白提示：建议选择“委托的权限(用户登录)”该权限类型，调用API较多，操作步骤较少简单粗暴，调用成功几率高\n注册的应用程序API权限类型有两种，其主要区别如下表所示：\n权限类型 委托的权限(用户登录) 应用程序权限(非用户登录) 官方释义 应用程序必须以登录用户身份访问API 应用程序在用户未登录的情况下作为后台服务或守护程序运行 需要的信息 账户名称+账户密码+应用程序(客户端)ID 账户名称+客户端机密+应用程序(客户端)ID 功能影响 程序中所有API均可调用 部分API权限受限无法调用(官方限制) API权限配置 可由PC版程序自动配置添加API权限 必须手动配置API权限 显示颜色标识 蓝色 深青色 本文使用委托的权限 委托的权限 # 点击“API权限”-“添加权限”-“Microsoft Graph” 选择“委托的权限” 根据编辑页面中列出的API权限需求表（注意在程序中切换为\u0026quot;登录“）来勾选所对应的API权限，全部选择完成后点击\u0026quot;添加权限”。 最后点击代表XXX授予管理员同意,对话框选择“是”（该图包含了当前程序“委托的权限(用户登录)”全部API所需要的权限）。 同理如果使用应用程序权限(非用户登录)，那么在第三步的勾选权限的时候，请按照图片的勾选 创建客户端密码 # 点击“证书密码”-“新客户端密码”-“24个月”-“添加” 点击“值”该列中的“复制”（不要复制\u0026quot;ID\u0026quot;列中的值），并立即将该密码保存至电脑，保存的值即为“客户端密码”， 注：该值必须立即保存，退出该页面后将永远无法查看。 创建一个新的E5子账户(可选步骤) # 登入E5管理员账户进入管理员界面，创建一个新的子账户，使用这个子账户登录程序调用API。\n为什么建议这样做：Microsoft 365 E5 Renew中的部分API包含了写操作，例如邮件和Onedrive的API，这些API在随机模式下会生成大量垃圾邮件和文件（虽然单独为此设立了一个文件夹），部分人可能会对此行为非常介意，而且程序频繁的读写可能会对您正常使用账户造成影响，因此不建议使用管理员账户登录。\n前文已经教过如何创建子账户了 填写必要信息 # 在账户运行配置页面中填写账户信息，且登录调用填写账户密码、非登录调用填写客户端密码，并选择自己选定的调用方式，注意调用方式不要选错了！！！ 最后点击“添加运行账号”按钮完成配置。\n也就是说登录模式中 填账号密码 非登录模式 填机密 客户端ID在Azure中的概述里 验证成功 # 最后 # 一定不要把重要数据储存在e5上 一定不要把重要数据储存在e5上 一定不要把重要数据储存在e5上\n数据转移 # 可以使用 mover进行数据转移 ","date":"12 June 2023","permalink":"/posts/e5/","section":"Posts","summary":"E5 # 前言 # 本文大部分内容来自以下链接\n2023 最新白嫖Microsoft E5 ( Onedrive 5T ) 开发者账号教程\nE5 调用API续订服务：Microsoft 365 E5 Renew X\nE5简介 # Office365开发版E5是为开发人员提供的，是微软的官方活动，申请Office 365开发者计划可以获得为期3个月的免费Office365 E5。 而E5计划就包含了25个用于所有Office 365 应用的许可证\nE5的使用大体分为注册和续订两个部分\nE5注册 # 首先最好新注册一个Outlook的邮箱账号 这个账号将作为开发者","title":"Microsoft 365 E5开发者使用指南"},{"content":"","date":"12 June 2023","permalink":"/tags/office365/","section":"Tags","summary":"","title":"Office365"},{"content":"","date":"12 June 2023","permalink":"/tags/onedrive/","section":"Tags","summary":"","title":"OneDrive"},{"content":"","date":"12 June 2023","permalink":"/tags/%E5%BE%AE%E8%BD%AF/","section":"Tags","summary":"","title":"微软"},{"content":"","date":"26 April 2023","permalink":"/tags/zerotier/","section":"Tags","summary":"","title":"ZeroTier"},{"content":"","date":"26 April 2023","permalink":"/categories/%E7%BD%91%E7%BB%9C/","section":"Categories","summary":"","title":"网络"},{"content":" ZeroTier简明教程 # 引言 # 对于现在的环境来说，公网IPv4已经很难申请，IPv6还未普及，对于需要远程访问的我来说，ddns虽然不错，但是他需要付费，而且还有许多流量和设备的限制。这时候我发现了ZeroTier\n介绍 # ZeroTier的优点\n采用P2P技术，去中心化 无限创建网络 最高支持25个设备 开源支持自建 相比公网IP安全性高，加入网络需要认证 教程 # 注册账号 # 官网： ZeroTier\n推荐直接使用Google账号登录，方便快捷\n创建Network # 点击Create A Network后就会自动创建一个网络，点击该Network进入设置。记住Network ID，你之后要靠该ID加入使用设备。\n加入设备 # 下载对应操作系统的 客户端，以Windows和AndroID为例子，打开软件后输入Network ID以加入网络\n设备认证 # 加入网络后不能马上生效，需要在网页中认证。请在网页中点击该Network进入设置页面，下滑至Members选项，然后你可以看到你的设备，点击左侧的Auth方框完成认证，这样就可以连接了\nmoon节点？ # 这个是解决连接稳定问题的，需要一台能够直接访问的服务器。我的连接还算稳定，这个我暂时没有用到。需要的自行查阅相关资料\n结合使用 # spacedesk配合可实现远程控制电脑 scrcpy配合可实现远程控制手机 moonlight配合可实现串流 弹弹play配合可实现远程媒体库 localsend配合可实现远程传输文件 局域网游戏联机（延迟未知） \u0026hellip;\u0026hellip; 等等软件配合起来使用可以达到很好的效果 ","date":"26 April 2023","permalink":"/posts/zerotier/","section":"Posts","summary":"ZeroTier简明教程 # 引言 # 对于现在的环境来说，公网IPv4已经很难申请，IPv6还未普及，对于需要远程访问的我来说，ddns虽然不错，但是他需要付费，而且还有许多流量和设备的限制。这时候我发现了ZeroTier\n介绍 # ZeroTier的优点\n采用P2P技术，去中心化 无限创建网络 最高支持25个设备 开源支持自建 相比公网IP安全性高，加入网络需要认证 教程 # 注册账号 # 官网： ZeroTier\n推荐直接使用Google账号登录，方便快捷\n创建Network # 点击Create A Network后就会自动创建一个网络，点击该Network进入设置。记住Network ID，你之后要靠该ID加入使用设备。\n加入设备 # 下载对应操作系统的 客户端，以Windows和AndroID为例子，打开软件后输入Network ID以加入网络","title":"异地组网-ZeroTier简明教程"},{"content":"","date":"21 March 2023","permalink":"/tags/blue-archive/","section":"Tags","summary":"","title":"Blue Archive"},{"content":"","date":"21 March 2023","permalink":"/tags/clash/","section":"Tags","summary":"","title":"clash"},{"content":"","date":"21 March 2023","permalink":"/tags/heaven-burns-red/","section":"Tags","summary":"","title":"Heaven Burns Red"},{"content":"","date":"21 March 2023","permalink":"/tags/project-sekai/","section":"Tags","summary":"","title":"Project Sekai"},{"content":" 节省流量下载外服游戏资源 # 引言 # 在游玩外服的时候特别是下载资源，特别耗时又费力，特别是当节点质量不稳定的时候，特别容易造成下载速度慢。而且有一些游戏节点流量是翻倍计算的。\n原理 # 大家下载游戏的时候有没有遇到过连接一段时间的节点后，马上断开，下载速度就突然快了不少或者是也能下载了？这多半原因是DNS污染造成（当然也可能是一些其他的原因）。很多资源下载的地址是可以直连的，速度也还不错，特别是有些游戏用的CDN节点。\n教程 # 解决方法大致有\n更换加密DNS防止被污染（作用有限） 让资源下载地址直接连接，其他正常走代理 加密DNS # 在手机设置加密DNS 在手机网络选项里基本上都有支持DoT，大概是Android 9以后开始加入的，国外的加密DNS基本上连不上，国内的我在用阿里的 dns.alidns.com 这个方法解决有限，而且有一些不如国外的DoH\n直连 # 这个其实也很简单，就是在游戏下载的时候找到它在下载的那个域名添加的直连列表中。以clash的config.yaml为例\n只需要在rules中加入规则即可 rules: - DOMAIN-KEYWORD,sharepoint.com,DIRECT 如果你用的是Windows，可以在Parsers中加入如下代码实现预处理，这样就不必每次更新的时候都会被替换掉 parsers: # array - url: 你的订阅连接 yaml: prepend-rules: - DOMAIN-KEYWORD,sharepoint.com,DIRECT # rules最前面增加一个规则 以上是以微软的OneDrive网盘为例其中sharepoint.com是网盘的域名\n同时clash也能够使用自定义DNS，同时支持DoH\n总结 # 下面是我总结出的一些游戏对应的资源下载地址，可以设置为直接连接 持续更新ing\n#微软OneDrive - DOMAIN-SUFFIX,sharepoint.com,DIRECT - DOMAIN-KEYWORD,onedrive,DIRECT #世界计划Project Sekai繁体中文 - DOMAIN-SUFFIX,bytedgame.com,DIRECT - DOMAIN-SUFFIX,cloudfront.net,DIRECT #这个也是世界计划的，如果多人无法找到房间请加入 - DOMAIN-SUFFIX,bc.googleusercontent.com,DIRECT #Blue Archive - DOMAIN-SUFFIX,ba.dn.nexoncdn.co.kr,DIRECT #緋染天空Heaven Burns Red - DOMAIN-SUFFIX,heaven-burns-red-assets-ap.akamaized.net,DIRECT #apkpure(推荐使用多线程下载) - DOMAIN-SUFFIX,winudf.com,DIRECT #mega网盘 - DOMAIN-SUFFIX,userstorage.mega.co.nz,DIRECT ","date":"21 March 2023","permalink":"/posts/gamedownload/","section":"Posts","summary":"节省流量下载外服游戏资源 # 引言 # 在游玩外服的时候特别是下载资源，特别耗时又费力，特别是当节点质量不稳定的时候，特别容易造成下载速度慢。而且有一些游戏节点流量是翻倍计算的。\n原理 # 大家下载游戏的时候有没有遇到过连接一段时间的节点后，马上断开，下载速度就突然快了不少或者是也能下载了？这多半原因是DNS污染造成（当然也可能是一些其他的原因）。很多资源下载的地址是可以直连的，速度也还不错，特别是有些游戏用的CDN节点。\n教程 # 解决方法大致有\n更换加密DNS防止被污染（作用有限） 让资源下载地址直接连接，其他正常走代理 加密DNS # 在手机设置加密DNS 在手机网络选项里基本上都有支持DoT，大概是Android 9以后开始加入的，国外的加密DNS基本上连不上，国内的我在用阿里的 dns.alidns.com 这个方法解决有限，而且有一些不如国外的DoH\n直连 # 这个其实也很简单，就是在游戏下载的时候找到它在下载的那个域名添加的直连列表中。以clash的config.yaml为例\n只需要在rules中加入规则即可 rules: - DOMAIN-KEYWORD,sharepoint.com,DIRECT 如果你用的是Windows，可以在Parsers中加入如下代码实现预处理，这样就不必每次更新的时候都会被替换掉 parsers: # array - url: 你的订阅连接 yaml: prepend-rules: - DOMAIN-KEYWORD,sharepoint.","title":"关于一些外服游戏下载节省流量"},{"content":"","date":"21 March 2023","permalink":"/tags/%E4%B8%8B%E8%BD%BD/","section":"Tags","summary":"","title":"下载"},{"content":"","date":"17 January 2023","permalink":"/tags/sony/","section":"Tags","summary":"","title":"Sony"},{"content":" XM5使用体验 # 本篇文章只是分享个人的使用感受，可能描述得有些偏颇，请见谅\n个人状况 # 需求 # 我是一名学生党，平时在自习室的时候，特别是在教室晚自习，总是有很多细细碎碎的杂音干扰我学习。所以我想有一个耳机能够帮助我隔绝杂音。\n我不想再使用入耳式耳机了，因为我长时间戴入耳式耳朵很容易痒，我比较害怕得中耳炎。\n听歌习惯 # 我平时主要是以ACG音乐为主，JPOP，还有少部分EDM。\n之前的设备 # 我之前也用过Sony MDR-EX155AP，是个塞子(耳塞套我更换过)。质量非常不错，初中开始用到现在，至少有4年了感觉非常不错。 去年高考完暑假我买了漫步者的W800BTPlus体验上感觉比入耳式的舒服，声音比较塞子开阔一些 XM5的使用 # 购买 # 我是在JD领取优惠卷以后以1958的价格购入的，当时PDD百亿补贴还是2000出头，感觉已经非常赚了。\n外观 # 我买的是黑色的，虽然感觉白色更好看一些，但是考虑到比较容易脏我还是选择了黑色。我个人是比较喜欢这个外观的，给我一种现代简约的感觉。\n佩戴 # xm5佩戴绝对是第一梯队的水平，我的耳朵是属于比较大的那种的，之前头戴久了耳朵容易痛，但是xm5非常舒适，戴久了耳朵也不会痛。缺的也很明显，是头型毁灭者。\n还有最重要的一点是我是戴眼镜的，戴久了也不会感觉很夹，十分舒适。但是还是不推荐戴眼镜，因为会使得耳机密闭性下降，降噪效果会下降。\n这个耳罩的材质也十分柔软，而且十分的平滑，看起来舒服戴起来也舒服。缺点就是平时就只能耳罩朝下放，挂脖子的时候也是只能耳罩朝外面，不能完全转过来，看起来有点傻。\n(最大开合角度，不能再往我这边转了)\n降噪 # 降噪是非常舒服的，我没有体验过其他降噪耳机，我只能说降噪确实只是降低频多，中高频不是很好，比如公交车上的语音播报还是听得见。但是被动降噪可以比较好的降低人声，特别是你再放音乐基本上就不会听见他们在说啥了。但如果声音是直接通过骨头传导的(比如工地的那种钻机)，那真的是降噪都救不了了。\n还有一点就是关于耳压，我第一次戴的时候会有一些眩晕的感觉，但是之后再次佩戴都不会产生不适的感觉，我觉得这非常好。\n底躁的话我完全感受不到，之前我听了一首歌发现怎么会有底躁，后来才发现原来是歌自带底躁，那没事了。\n音质 # 我第一次买那么贵的耳机，所以我只能和那些几百钱的耳机做对比(虽然很不合理)\n对比漫步者W800BTPlus # 有线模式 # 声音低频不是很好，但是如果只听那个鼓点的话，发现低音也不是很差啊，但就是有点混在一起给我一种塑料感。声音混沌，没有xm5给我干净利落的感觉，感觉是分离度不够，甚至比我那个耳塞还要混沌，特别是我听ACG音乐 夜の向日葵的时候，低频那一段和钢琴混在一起真的难受。特别是这一点给我降维打击的感觉。高频我感觉是比xm5多一点的。\n蓝牙模式 # 蓝牙模式就好太多了，声音不会像没开机那样混沌糊在一起的感觉。但是高频比较刺耳了，比有线模式还要多得多。可能是高频多了所以相比起xm5听起来比较清脆通透。钢琴这种中频的话还是比较好听的。低频相比起xm5有所不足，但重要的是他的分离度有了，不会糊在一起了\n对比Sony MDR-EX155AP # 这款耳机低音是很足很劲爆，而且分离度也还可以。不会给人塑料感，都是低频很足的，但是听起来还是比xm5糊了一些，有一点蒙在鼓里的感觉。整体风格感觉和xm5有点相似。\nAuto EQ # AutoEq 可以比较好的还原出标准的eq，所以我也试了一下，发现真的就是白开水。整个低频被拉下去了，然后中高频提了上来，特别是1khz左右提上来，感觉是那种打电话时候的那种有点空灵的声音，整个声音的饱满度都下来了。高频拉高了会清脆很多 ，但我还是更偏向于Sony的调音，非常饱满。\n(调整eq的曲线)\n开机听歌 # 对于xm5有线模式，一定要打开电源，否则那个声音比漫步者W800BTPlus有线模式还要糊，根本就听不下去，基本上可以直接送走\n一些小的细节 # 佩戴检测 # 我很喜欢Sony的这个佩戴检测，戴上去自动播放取下来自动暂停，真的很有用也很方便。\n智能免摘 # 这个功能我用得不多我觉得意义不是很大，而且我没有说话的时候有时候他也检测出来(可能是因为我戴了帽子)，总之就是不推荐打开\nLDAC # 这个不用多说了，有用，但是我基本上听不出，因为我128kps以上不太能听得出区别。\n同时连接两台设备 # 这个我基本上用不上，一般我都是一直拿他来听歌的，看视频啥的就外放。\n触控板 # 这个方便，最重要的是捂住可以快速切换到通透模式，这个非常方便，不用摘耳机就可以听清楚外面的声音。\n自适应声音控制 # 这个功能感觉不是很智能，特别是在交通工具和步行之间频繁切换，而且有时走路和停留也不是那么灵敏。\n固件 # 我还是使用了初始固件，听说新固件影响降噪，所以我也没有去升级。除非什么时候出一个能够手动调整降噪等级，我觉得我才会去更新固件。\n音压检测 # 这个功能我感觉比较好用，能够检测当前耳机内的音量大小，可以大概控制你听音乐的音量，不至于太大声。\n保养 # 耳机进水不保修，听说特别是耳机在潮湿的环境充电可能会导致损害，所以我平时都会放两包干燥剂在耳机包里面，特别是要充电的时候都会先放置一个晚上。\n黑色耳机平时确实容易粘上一些指纹，轻轻用眼镜布擦一下就可以了，不怎么影响外观 待更新 # 更加具体场景的降噪体验感受 对比其他价位的耳机的音质 体验其他降噪耳机(如果身边的人有的话) 关于抗风噪的体验 ","date":"17 January 2023","permalink":"/posts/xm5/","section":"Posts","summary":"XM5使用体验 # 本篇文章只是分享个人的使用感受，可能描述得有些偏颇，请见谅\n个人状况 # 需求 # 我是一名学生党，平时在自习室的时候，特别是在教室晚自习，总是有很多细细碎碎的杂音干扰我学习。所以我想有一个耳机能够帮助我隔绝杂音。\n我不想再使用入耳式耳机了，因为我长时间戴入耳式耳朵很容易痒，我比较害怕得中耳炎。\n听歌习惯 # 我平时主要是以ACG音乐为主，JPOP，还有少部分EDM。\n之前的设备 # 我之前也用过Sony MDR-EX155AP，是个塞子(耳塞套我更换过)。质量非常不错，初中开始用到现在，至少有4年了感觉非常不错。 去年高考完暑假我买了漫步者的W800BTPlus体验上感觉比入耳式的舒服，声音比较塞子开阔一些 XM5的使用 # 购买 # 我是在JD领取优惠卷以后以1958的价格购入的，当时PDD百亿补贴还是2000出头，感觉已经非常赚了。\n外观 # 我买的是黑色的，虽然感觉白色更好看一些，但是考虑到比较容易脏我还是选择了黑色。我个人是比较喜欢这个外观的，给我一种现代简约的感觉。\n佩戴 # xm5佩戴绝对是第一梯队的水平，我的耳朵是属于比较大的那种的，之前头戴久了耳朵容易痛，但是xm5非常舒适，戴久了耳朵也不会痛。缺的也很明显，是头型毁灭者。\n还有最重要的一点是我是戴眼镜的，戴久了也不会感觉很夹，十分舒适。但是还是不推荐戴眼镜，因为会使得耳机密闭性下降，降噪效果会下降。","title":"Sony XM5 耳机使用感受"},{"content":"","date":"17 January 2023","permalink":"/tags/%E8%80%B3%E6%9C%BA/","section":"Tags","summary":"","title":"耳机"},{"content":"","date":"17 January 2023","permalink":"/categories/%E8%AF%84%E6%B5%8B/","section":"Categories","summary":"","title":"评测"},{"content":"","date":"7 January 2023","permalink":"/tags/taskkill/","section":"Tags","summary":"","title":"taskkill"},{"content":"","date":"7 January 2023","permalink":"/categories/%E8%BD%AF%E4%BB%B6/","section":"Categories","summary":"","title":"软件"},{"content":" 一键结束进程 # 起因 # 我真的绷不住了，Alt+F4 不能够关闭程序，调个任务栏管理器半天不出来，出来了还无响应，我真的服了，只能强制重启。所以我打做个一键杀死进程的程序。\n编写 # 思路 # 需要获取当前正在运行的程序 获取当前窗口句柄需要使用到系统函数，通过窗口得到进程pid，所以必须使用win32库 需要能够调用taskkill指令 Python中内置的os.system()代码就能够很好的执行，但是需要提升至管理员身份 加上按键监听 这个部分在我之前的博客 超级粘贴也有使用到，就是pynput库 代码 # import win32gui import win32process import psutil import os from pynput.keyboard import Listener,Key import ctypes # 排除列表 whitelist=[\u0026#34;explorer.exe\u0026#34;] #判断是否有管理员权限 def is_admin(): try: return ctypes.windll.shell32.IsUserAnAdmin() except: return False #监听 def on_release(key): if key == Key.esc: # 停止监听 return False if key == Key.f2: # 这里是按f2调用kill函数 kill() #杀死进程 def kill(): # 方案1 指哪打哪 # point =win32gui.GetCursorPos() # now_point=win32gui.WindowFromPoint(point) # now_process = win32process.GetWindowThreadProcessId(now_point)[1] #方案2 获取当前激活的窗口 now_win = win32gui.GetForegroundWindow() now_process = win32process.GetWindowThreadProcessId(now_win)[1] tprocess=psutil.Process(pid=now_process) if whitelist.count(tprocess.name())==0: ##判断是否白名单进程 target = r\u0026#39;taskkill /pid {} /F /T\u0026#39;.format(now_process) os.system(target) #开始判断管理员权限 if is_admin() == False: print(\u0026#34;警告:当前非管理员身份运行,可能导致kill失败\u0026#34;) #开始监听 with Listener( on_release=on_release) as listener: listener.join() 我也会把exe文件发布在GitHub上\nhttps://github.com/ohdmire/OnePressKill/releases/\nOhdmire/OnePressKill 能够一键结束进程 HTML 0 0 小趣事 # 我真tmsb，把文件名称命名为taskkill，结果执行os.system的时候就又调用了一遍该程序，结果我看半天以为是pyinstaller编译出错了，我真的是服了。\n该问题已在v0.2得到修复\n更新日志 # v0.2修复了编译后致命bug v0.3增加了白名单功能，默认explorer.exe为白名单程序。同时增加了psutil库获取进程名称 v0.4增加了指哪打哪的选择 使用教程 # 只要运行程序按下F2就能杀死当前窗口的程序，按ESC退出程序\n你可能还需要以管理员身份运行该程序\n如果你需要也可以自行更改按键，具体参考官方文档 https://pynput.readthedocs.io/en/latest/keyboard.html\n最后 # 效果 参考链接 # python小工具\u0026ndash;查看窗口程序进程\nPython 获取Windows管理员权限\n","date":"7 January 2023","permalink":"/posts/onepresskill/","section":"Posts","summary":"一键结束进程 # 起因 # 我真的绷不住了，Alt+F4 不能够关闭程序，调个任务栏管理器半天不出来，出来了还无响应，我真的服了，只能强制重启。所以我打做个一键杀死进程的程序。\n编写 # 思路 # 需要获取当前正在运行的程序 获取当前窗口句柄需要使用到系统函数，通过窗口得到进程pid，所以必须使用win32库 需要能够调用taskkill指令 Python中内置的os.system()代码就能够很好的执行，但是需要提升至管理员身份 加上按键监听 这个部分在我之前的博客 超级粘贴也有使用到，就是pynput库 代码 # import win32gui import win32process import psutil import os from pynput.keyboard import Listener,Key import ctypes # 排除列表 whitelist=[\u0026#34;explorer.","title":"一键kill"},{"content":"","date":"14 December 2022","permalink":"/tags/javascript/","section":"Tags","summary":"","title":"JavaScript"},{"content":" JavaScript笔记 # 内容参考来源 W3School\n以下内容并不完整，主要是我在我学过Python的基础上，在理解新的语言所需要留意的部分。\n显示方案 # JavaScript 能够以不同方式“显示”数据：\n使用 window.alert() 写入警告框 使用 document.write() 写入 HTML 输出 使用 innerHTML 写入 HTML 元素 使用 console.log() 写入浏览器控制台 语法 # var x, y;\t// 如何声明变量 x = 7; y = 8;\t// 如何赋值 z = x + y;\t// 如何计算值 块作用域 # 通过 var 关键词声明的变量没有块作用域。 在块 {} 内声明的变量可以从块之外进行访问。\n可以使用 let 关键词声明拥有块作用域的变量。 在块 {} 内声明的变量无法从块外访问：\n{ var x = 10; } // 此处可以使用 x { let x = 10; } // 此处不可以使用 x 在第一个例子中，在循环中使用的变量使用 var 重新声明了循环之外的变量。 在第二个例子中，在循环中使用的变量使用 let 并没有重新声明循环外的变量。 如果在循环中用 let 声明了变量 i，那么只有在循环内，变量 i 才是可见的。 var i = 7; for (var i = 0; i \u0026lt; 10; i++) { // 一些语句 } // 此处，i 为 10 let i = 7; for (let i = 0; i \u0026lt; 10; i++) { // 一些语句 } // 此处 i 为 7 重新声明变量 # 允许在程序的任何位置使用 var 重新声明 JavaScript 变量 var x = 10; // 现在，x 为 10 var x = 6; // 现在，x 为 6 在不同的作用域或块中，通过 let 重新声明变量是允许的 let x = 6; // 允许 { let x = 7; // 允许 } { let x = 8; // 允许 } 其余情况不可以重新声明 不是真正的常数 # 关键字 const 有一定的误导性。 它没有定义常量值。它定义了对值的常量引用。 因此，我们不能更改常量原始值，但我们可以更改常量对象的属性。\n特性 # 不能改变原始值 可以更改常量对象的属性 // 您可以创建 const 对象： const car = {type:\u0026#34;porsche\u0026#34;, model:\u0026#34;911\u0026#34;, color:\u0026#34;Black\u0026#34;}; // 您可以更改属性： car.color = \u0026#34;White\u0026#34;; // 您可以添加属性： car.owner = \u0026#34;Bill\u0026#34;; 但是您无法重新为常量对象赋值\nconst car = {type:\u0026#34;porsche\u0026#34;, model:\u0026#34;911\u0026#34;, color:\u0026#34;Black\u0026#34;}; car = {type:\u0026#34;Volvo\u0026#34;, model:\u0026#34;XC60\u0026#34;, color:\u0026#34;White\u0026#34;}; // ERROR 常量数组可以更改 // 您可以创建常量数组： const cars = [\u0026#34;Audi\u0026#34;, \u0026#34;BMW\u0026#34;, \u0026#34;porsche\u0026#34;]; // 您可以更改元素： cars[0] = \u0026#34;Honda\u0026#34;; // 您可以添加元素： cars.push(\u0026#34;Volvo\u0026#34;); 但是您无法重新为常量数组赋值\nconst cars = [\u0026#34;Audi\u0026#34;, \u0026#34;BMW\u0026#34;, \u0026#34;porsche\u0026#34;]; cars = [\u0026#34;Honda\u0026#34;, \u0026#34;Toyota\u0026#34;, \u0026#34;Volvo\u0026#34;]; // ERROR 运算符 # 算数 # 运算符 描述 + 加法 - 减法 * 乘法 / 除法 % 取模（余数） ++ 递加 \u0026ndash; 递减 赋值 # 运算符 例子 等同于 = x = y x = y += x += y x = x + y -= x -= y x = x - y *= x *= y x = x * y /= x /= y x = x / y %= x %= y x = x % y 比较 # 运算符 描述 == 等于 === 等值等型 != 不相等 !== 不等值或不等型 \u0026gt; 大于 \u0026lt; 小于 \u0026gt;= 大于或等于 \u0026lt;= 小于或等于 ? 三元运算符 逻辑 # 运算符 描述 \u0026amp;\u0026amp; 逻辑与 || 逻辑或 ! 逻辑非 类型 # 运算符 描述 typeof 返回变量的类型。 instanceof 返回 true，如果对象是对象类型的实例。 ？位运算符 # 运算符 描述 例子 等同于 结果 十进制 \u0026amp; 与 5 \u0026amp; 1 0101 \u0026amp; 0001 0001 1 | 或 5 | 1 0101 | 0001 0101 5 ~ 非 ~ 5 ~0101 1010 10 ^ 异或 5 ^ 1 0101 ^ 0001 0100 4 \u0026laquo; 零填充左位移 5 \u0026laquo; 1 0101 \u0026laquo; 1 1010 10 \u0026raquo; 有符号右位移 5 \u0026raquo; 1 0101 \u0026raquo; 1 0010 2 \u0026raquo;\u0026gt; 零填充右位移 5 \u0026raquo;\u0026gt; 1 0101 \u0026raquo;\u0026gt; 1 0010 2 优先级 # 20 ( ) 表达式分组 (3 + 4) 19 . 成员 person.name 19 [] 成员 person[\u0026ldquo;name\u0026rdquo;] 19 () 函数调用 myFunction() 19 new 创建 new Date() 17 ++ 后缀递增 i++ 17 \u0026ndash; 后缀递减 i\u0026ndash; 16 ++ 前缀递增 ++i 16 \u0026ndash; 前缀递减 \u0026ndash;i 16 ! 逻辑否 !(x==y) 16 typeof 类型 typeof x 15 ** 求幂 (ES7) 10 ** 2 14 * 乘 10 * 5 14 / 除 10 / 5 14 % 模数除法 10 % 5 13 + 加 10 + 5 13 - 减 10 - 5 12 \u0026laquo; 左位移 x \u0026laquo; 2 12 \u0026raquo; 右位移 x \u0026raquo; 2 12 \u0026raquo;\u0026gt; 右位移（无符号） x \u0026raquo;\u0026gt; 2 11 \u0026lt; 小于 x \u0026lt; y 11 \u0026lt;= 小于或等于 x \u0026lt;= y 11 \u0026gt; 大于 x \u0026gt; y 11 \u0026gt;= 大于或等于 x \u0026gt;= y 11 in 对象中的属性 \u0026ldquo;PI\u0026rdquo; in Math 11 instanceof 对象的实例 instanceof Array 10 == 相等 x == y 10 === 严格相等 x === y 10 != 不相等 x != y 10 !== 严格不相等 x !== y 9 \u0026amp; 按位与 x \u0026amp; y 8 ^ 按位 XOR x ^ y 7 | 按位或 x | y 6 \u0026amp;\u0026amp; 逻辑与 x \u0026amp;\u0026amp; y 5 || 逻辑否 x || y 4 ? : 条件 ? \u0026ldquo;Yes\u0026rdquo; : \u0026ldquo;No\u0026rdquo; 3 = 赋值 x = y 3 += 赋值 x += y 3 -= 赋值 x -= y 3 *= 赋值 x *= y 3 %= 赋值 x %= y 3 \u0026laquo;= 赋值 x \u0026laquo;= y 3 \u0026raquo;= 赋值 x \u0026raquo;= y 3 \u0026raquo;\u0026gt;= 赋值 x \u0026raquo;\u0026gt;= y 3 \u0026amp;= 赋值 x \u0026amp;= y 3 ^= 赋值 x ^= y 3 |= 赋值 x |= y 2 yield 暂停函数 yield x 1 , 逗号 7 , 8 数据类型 # var length = 7; // 数字 var lastName = \u0026#34;Gates\u0026#34;; // 字符串 var cars = [\u0026#34;Porsche\u0026#34;, \u0026#34;Volvo\u0026#34;, \u0026#34;BMW\u0026#34;]; // 数组 var x = {firstName:\u0026#34;Bill\u0026#34;, lastName:\u0026#34;Gates\u0026#34;}; // 对象 在第一个例子中，JavaScript 把 911 和 7 视作数值，直到遇见 \u0026ldquo;Porsche\u0026rdquo;。 在第二个例子中，由于第一个操作数是字符串，因此所有操作数都被视为字符串。 var x = 911 + 7 + \u0026#34;Porsche\u0026#34;; x= 918Porsche\nvar x = \u0026#34;Porsche\u0026#34; + 911 + 7; x = Porsche9117\nUndefined 与 Null 的区别 # Undefined 与 null 的值相等，但类型不相等：\ntypeof undefined // undefined typeof null // object null === undefined // false null == undefined // true 复杂数据 # typeof 运算符可返回以下两种类型之一：\nfunction object typeof 运算符把对象、数组或 null 返回 object。\ntypeof 运算符不会把函数返回 object。\ntypeof {name:\u0026#39;Bill\u0026#39;, age:62} // 返回 \u0026#34;object\u0026#34; typeof [1,2,3,4] // 返回 \u0026#34;object\u0026#34; (并非 \u0026#34;array\u0026#34;，参见下面的注释) typeof null // 返回 \u0026#34;object\u0026#34; typeof function myFunc(){} // 返回 \u0026#34;function\u0026#34; 函数 # function myFunction(p1, p2) { return p1 * p2; // 该函数返回 p1 和 p2 的乘积 } 在 JavaScript 函数中声明的变量，会成为函数的*局部变量\n对象 # var person = { firstName: \u0026#34;Bill\u0026#34;, lastName : \u0026#34;Gates\u0026#34;, id : 678, fullName : function() { return this.firstName + \u0026#34; \u0026#34; + this.lastName; } }; 属性和方法in对象\nthis 关键词 # 在函数定义中，this 引用该函数的“拥有者”。\n在上面的例子中，this 指的是“拥有” fullName 函数的 person 对象。\n换言之，this.firstName 的意思是 this 对象的 firstName 属性。\n访问对象属性 # objectName.propertyName //方法1 objectName[\u0026#34;propertyName\u0026#34;] //方法2 访问对象方法 # objectName.methodName() 如果您不使用 () 访问 fullName 方法，则将返回函数定义(就是怎么写怎么出)\nname = person.fullName; 通过new声明对象 # var x = new String(); // 把 x 声明为 String 对象 var y = new Number(); // 把 y 声明为 Number 对象 var z = new Boolean(); //\t把 z 声明为 Boolean 对象 请在JavaScript的编写中避免使用new 关键词\nHTML事件 # \u0026lt;element event=\u0026#39;一些 JavaScript\u0026#39;\u0026gt; 事件 描述 onchange HTML 元素已被改变 onclick 用户点击了 HTML 元素 onmouseover 用户把鼠标移动到 HTML 元素上 onmouseout 用户把鼠标移开 HTML 元素 onkeydown 用户按下键盘按键 onload 浏览器已经完成页面加载 字符串 # 转义字符 # 代码 结果 描述 \\' ' 单引号 \\\u0026quot; \u0026quot; 双引号 \\\\ \\ 反斜杠 代码 结果 \\b 退格键 \\f 换页 \\n 新行 \\r 回车 \\t 水平制表符 \\v 垂直制表符 字符串方法和属性 # JavaScript会将字符串视为对象\n字符串位置 # length 属性返回字符串的长度 indexOf() 方法返回字符串中指定文本**首次出现的索引（位置） lastIndexOf() 方法返回指定文本在字符串中最后一次出现的索引 如果未找到文本， indexOf() 和 lastIndexOf() 均返回 -1 两种方法都接受作为检索起始位置的第二个参数 search() 方法搜索特定值的字符串，并返回匹配的位置 search() 方法无法设置第二个开始位置参数。 indexOf() 方法无法设置更强大的搜索值（正则表达式）\n提取部分字符串 # 普通方法 # slice(start, end) substring(start, end) substring() 无法接受负的索引\nsubstr(start, length) 安全方法 # charAt(position) charAt() 方法返回字符串中指定下标（位置）的字符串\ncharCodeAt(position) charCodeAt() 方法返回字符串中指定索引的字符 unicode 编码\n属性访问法 # var str = \u0026#34;HELLO WORLD\u0026#34;; str[0]; // 返回 H 其他方法 # match() 根据正则表达式在字符串中搜索匹配项，并将匹配项作为Array对象返回 string.match(regexp) includes()如果字符串包含指定值，includes() 方法返回 true string.includes(searchvalue, start) startsWith()如果字符串以指定值开头，则 startsWith() 方法返回 true，否则返回 false string.startsWith(searchvalue, start) endsWith()如果字符串以指定值结尾，则 endsWith() 方法返回 true，否则返回 false string.endsWith(searchvalue, length) 替换字符串内容 # replace() 方法不会改变调用它的字符串。它返回的是新字符串。 默认地，replace() 只替换首个匹配\n需要掌握正则表达式\n转换为大写和小写 # 通过 toUpperCase() 把字符串转换为大写 通过 toLowerCase() 把字符串转换为小写 其他 # concat() 连接两个或多个字符串： trim() 方法删除字符串两端的空白符： 把字符串转换为数组 # var txt = \u0026#34;a,b,c,d,e\u0026#34;; // 字符串 txt.split(\u0026#34;,\u0026#34;); // 用逗号分隔 txt.split(\u0026#34; \u0026#34;); // 用空格分隔 txt.split(\u0026#34;|\u0026#34;); // 用竖线分隔 如果分隔符是 \u0026ldquo;\u0026quot;，被返回的数组将是间隔单个字符的数组\n字符串模板 # 模板字面量使用反引号 (``) 而不是引号 (\u0026rdquo;\u0026quot;) 来定义字符串\n插值 # 模板字面量提供了一种将变量和表达式插入字符串的简单方法\n${...} let firstName = \u0026#34;Bill\u0026#34;; let lastName = \u0026#34;Gates\u0026#34;; let text = `Welcome ${firstName}, ${lastName}!`; 模板字面量允许字符串中的表达式\nlet price = 10; let VAT = 0.25; let total = `Total: ${(price * (1 + VAT)).toFixed(2)}`; 数字 # JavaScript 数值始终是 64 位的浮点数\n特殊 # NaN 属于 JavaScript 保留词，指示某个数不是合法数\nisNaN() 来确定某个值是否是数 Infinity （或 -Infinity）是 JavaScript 在计算数时超出最大可能数范围时返回的值\n十六进制 # var myNumber = 128; myNumber.toString(16); // 返回 80 myNumber.toString(8); // 返回 200 myNumber.toString(2); // 返回 10000000 数字方法 # toString() 以字符串返回数值。 toExponential() 返回字符串值，它包含已被四舍五入并使用指数计数法的数字。 toFixed() 返回字符串值，它包含了指定位数小数的数字 toPrecision() 返回字符串值，它包含了指定长度的数字 valueOf() 以数值返回数值 在 JavaScript 中，数字可以是原始值（typeof = number）或对象（typeof = object）。\n在 JavaScript 内部使用 valueOf() 方法可将 Number 对象转换为原始值。\n没有理由在代码中使用它。\n所有 JavaScript 数据类型都有 valueOf() 和 toString() 方法。\n全局方法 # 方法 描述 Number() 返回数字，由其参数转换而来。 parseFloat() 解析其参数并返回浮点数。 parseInt() 解析其参数并返回整数。 数值属性 # 属性 描述 MAX_VALUE 返回 JavaScript 中可能的最大数。 MIN_VALUE 返回 JavaScript 中可能的最小数。 NEGATIVE_INFINITY 表示负的无穷大（溢出返回）。 NaN 表示非数字值（\u0026ldquo;Not-a-Number\u0026rdquo;）。 POSITIVE_INFINITY 表示无穷大（溢出返回）。 var x = Number.MAX_VALUE; 数字属性不可用于变量\nvar x = 6; var y = x.MAX_VALUE; // y 成为 undefined 数组 # var cars = [\u0026#34;Saab\u0026#34;, \u0026#34;Volvo\u0026#34;, \u0026#34;BMW\u0026#34;]; var array-name = [item1, item2, ...]; 读写数组元素 # var name = cars[0]; //访问 cars[0] = \u0026#34;Opel\u0026#34;; //修改 数组元素可以是对象 # myArray[0] = Date.now; myArray[1] = myFunction; myArray[2] = myCars; 数组属性和方法 # var x = cars.length; // length 属性返回元素的数量 var y = cars.sort(); // sort() 方法对数组进行排序 length 属性返回数组的长度（数组元素的数目）\n遍历数组的最安全方法是使用 \u0026ldquo;for\u0026rdquo; 循环：\nvar fruits, text, fLen, i; fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;]; fLen = fruits.length; text = \u0026#34;\u0026lt;ul\u0026gt;\u0026#34;; for (i = 0; i \u0026lt; fLen; i++) { text += \u0026#34;\u0026lt;li\u0026gt;\u0026#34; + fruits[i] + \u0026#34;\u0026lt;/li\u0026gt;\u0026#34;; } Array.foreach() 函数 var fruits, text; fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;]; text = \u0026#34;\u0026lt;ul\u0026gt;\u0026#34;; fruits.forEach(myFunction); //调用数组的每个元素，并将元素传递给回调函数 text += \u0026#34;\u0026lt;/ul\u0026gt;\u0026#34;; function myFunction(value) { text += \u0026#34;\u0026lt;li\u0026gt;\u0026#34; + value + \u0026#34;\u0026lt;/li\u0026gt;\u0026#34;; } 添加数组元素 # push() 方法\nvar fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;]; fruits.push(\u0026#34;Lemon\u0026#34;); // 向 fruits 添加一个新元素 (Lemon) 或者指定\nvar fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;]; fruits[6] = \u0026#34;Lemon\u0026#34;; // 向 fruits 添加一个新元素 (Lemon) 添加最高索引的元素可在数组中创建\u0026quot;未定义\u0026quot;\n关联数组 # 数组只能使用数字索引\n以下内容属于命名索引\nJavaScript 会把数组重定义为标准对象，所有数组的方法和属性将产生非正确结果。\nvar person = []; person[\u0026#34;firstName\u0026#34;] = \u0026#34;Bill\u0026#34;; person[\u0026#34;lastName\u0026#34;] = \u0026#34;Gates\u0026#34;; person[\u0026#34;age\u0026#34;] = 62; var x = person.length; // person.length 将返回 0 var y = person[0]; // person[0] 将返回 undefined 识别数组 # typeof 返回 \u0026ldquo;object\u0026rdquo; var fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;]; typeof fruits; // 返回 object Array.isArray() Array.isArray(fruits); // 返回 true 其他\u0026hellip;\u0026hellip;. 把数组转换为字符串 # toString() 把数组转换为数组值（逗号分隔）的字符串 join() 方法也可将可以规定分隔符 删除元素和添加新元素 # 转移 # pop() 方法从数组中删除最后一个元素 shift() 方法会删除首个数组元素，并把所有其他元素“位移”到更低的索引 添加 # push() 方法（在数组结尾处）向数组添加一个新的元素 unshift() 方法（在开头）向数组添加新元素，并把所有其他元素“位移”到更高的索引 push()和unshift()方法返回新数组的长度\nvar fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;]; fruits.unshift(\u0026#34;Lemon\u0026#34;); // 返回 5 删除 # 使用 delete 会在数组留下未定义的空洞\nvar fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;]; delete fruits[0]; // 把 fruits 中的首个元素改为 undefined 拼接数组 # splice() 方法可用于向数组添加新项\nvar fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;]; fruits.splice(2, 2, \u0026#34;Lemon\u0026#34;, \u0026#34;Kiwi\u0026#34;); 第一个参数（2）定义了应添加新元素的位置（拼接）。\n第二个参数（2）定义应删除多少元素。\n其余参数（“Lemon”，“Kiwi”）定义要添加的新元素。\nsplice() 方法返回一个包含已删除项的数组：\nsplice() 在数组中**不留“空洞”**的情况下移除元素\n合并（连接）数组 # concat() 方法通过合并（连接）现有数组来创建一个新数组\nvar arr1 = [\u0026#34;Cecilie\u0026#34;, \u0026#34;Lone\u0026#34;]; var arr2 = [\u0026#34;Emil\u0026#34;, \u0026#34;Tobias\u0026#34;, \u0026#34;Linus\u0026#34;]; var arr3 = [\u0026#34;Robin\u0026#34;, \u0026#34;Morgan\u0026#34;]; var myChildren = arr1.concat(arr2, arr3); // 将arr1、arr2 与 arr3 连接在一起 裁剪数组 # slice() 方法用数组的某个片段切出新数组\nslice() 可接受两个参数，比如 (1, 3)。\n该方法会从开始参数选取元素，直到结束参数（不包括）为止。\n","date":"14 December 2022","permalink":"/notes/javascriptnote/","section":"Notes","summary":"JavaScript笔记 # 内容参考来源 W3School\n以下内容并不完整，主要是我在我学过Python的基础上，在理解新的语言所需要留意的部分。\n显示方案 # JavaScript 能够以不同方式“显示”数据：\n使用 window.alert() 写入警告框 使用 document.write() 写入 HTML 输出 使用 innerHTML 写入 HTML 元素 使用 console.log() 写入浏览器控制台 语法 # var x, y;\t// 如何声明变量 x = 7; y = 8;\t// 如何赋值 z = x + y;\t// 如何计算值 块作用域 # 通过 var 关键词声明的变量没有块作用域。 在块 {} 内声明的变量可以从块之外进行访问。","title":"JavaScript笔记"},{"content":" 超级粘贴 # 起因 # 最近发现一些平台是不能直接粘贴内容的（具体我就不说是哪个平台了😅），所以我编写了一段超级粘贴的程序\n编写 # 思路 # 毕竟粘贴这个行为是不合法的，那么我们能不能通过模拟键盘输入的方式来进行“粘贴”呢？这样思路就十分清晰了\n读取剪切板内容 将内容通过模拟键盘进行粘贴 我只会Python所以我就用Python来写:)\n编写过程 # 首先采用的是pyperclip进行剪切板读取，这一步没有什么问题。 然后我采用pyautogui模拟输入，然后重点是它不能输入中文 于是我又去网上找了找能输入中文的方案，最终找到了一个很好用的库pynput 到这就终于能输入中文了。 最后再加上按键监听就完成了 代码 # import pyperclip from pynput.keyboard import Controller,Listener,Key import time def paste(): time.sleep(0.2) #按下后间隔0.2s i=pyperclip.paste() keyboard = Controller() keyboard.type(i) print(\u0026#34;粘贴成功\u0026#34;+\u0026#34;\\n\u0026#34;+i+\u0026#34;\\n\u0026#34;) def on_release(key): if key == Key.esc: # 停止监听 return False if key == Key.f2: # 这里是按f2调用粘贴函数 paste() with Listener( on_release=on_release) as listener: listener.join() 我也会把exe文件发布在GitHub上\nhttps://github.com/ohdmire/SuperPaste/releases\nOhdmire/SuperPaste 超级粘贴，能够粘贴文本 HTML 0 0 使用教程 # 只要运行程序按下F2就能粘贴，按ESC退出程序\n你可能还需要将输入法切换为英文\n如果你需要也可以自行更改按键，具体参考官方文档 https://pynput.readthedocs.io/en/latest/keyboard.html\n最后 # 效果 参考链接 # pynput文档\n","date":"12 December 2022","permalink":"/posts/superpaste/","section":"Posts","summary":"超级粘贴 # 起因 # 最近发现一些平台是不能直接粘贴内容的（具体我就不说是哪个平台了😅），所以我编写了一段超级粘贴的程序\n编写 # 思路 # 毕竟粘贴这个行为是不合法的，那么我们能不能通过模拟键盘输入的方式来进行“粘贴”呢？这样思路就十分清晰了\n读取剪切板内容 将内容通过模拟键盘进行粘贴 我只会Python所以我就用Python来写:)\n编写过程 # 首先采用的是pyperclip进行剪切板读取，这一步没有什么问题。 然后我采用pyautogui模拟输入，然后重点是它不能输入中文 于是我又去网上找了找能输入中文的方案，最终找到了一个很好用的库pynput 到这就终于能输入中文了。 最后再加上按键监听就完成了 代码 # import pyperclip from pynput.keyboard import Controller,Listener,Key import time def paste(): time.","title":"超级粘贴"},{"content":"","date":"12 December 2022","permalink":"/tags/%E7%B2%98%E8%B4%B4/","section":"Tags","summary":"","title":"粘贴"},{"content":" pyTranscriber # 引言 # 你有没有过需要视频生成字幕的需求但是网上的转换都是收费的？今天我将介绍一个神器pyTranscriber能够免费生成视频字幕\n安装步骤 # 注意，你可能需要一定的Python cmd git知识\n首先你需要下载项目(推荐使用git clone) https://github.com/raryelcostasouza/pyTranscriber 你需要安装Python(勾选上 add to path) https://www.python.org/ 请打开cmd，cd到项目的目录中 输入pip install -r requirement.txt安装依赖 输入python main.py打开项目 你也可以使用虚拟Python环境安装软件，如poetry\n使用教程 # 生成字幕文件 # 首先打开软件是英文页面，点击标题栏上language按钮选择简体中文 再点击旁边的setting选项，设置好一个能连接上Google的代理(点击test可以测试连接可用性) 之后选择文件和视频的语言(原视频是什么语言就选什么语言) 点击生成字幕之后耐心等待 最后你会得到srt和txt文件 到这里就已经结束了，请享用你的字幕吧\n翻译 # 翻译网站 # 如果你还想翻译字幕，推荐你使用字幕翻译网站 https://translatesubtitles.com/\n上传字幕文件，然后选择翻译然后下载下来 当然你也可以使用有道翻译等国内翻译软件 （有道翻译有大学生免费翻译文档）\n有道翻译 # 将srt以文本打开，复制一份到word文档\n将word文档上传翻译，再复制内容回srt保存\n结果 # (这是选择两份字幕的最终效果)\n","date":"1 December 2022","permalink":"/posts/pytranscriber/","section":"Posts","summary":"pyTranscriber # 引言 # 你有没有过需要视频生成字幕的需求但是网上的转换都是收费的？今天我将介绍一个神器pyTranscriber能够免费生成视频字幕\n安装步骤 # 注意，你可能需要一定的Python cmd git知识\n首先你需要下载项目(推荐使用git clone) https://github.com/raryelcostasouza/pyTranscriber 你需要安装Python(勾选上 add to path) https://www.python.org/ 请打开cmd，cd到项目的目录中 输入pip install -r requirement.txt安装依赖 输入python main.py打开项目 你也可以使用虚拟Python环境安装软件，如poetry\n使用教程 # 生成字幕文件 # 首先打开软件是英文页面，点击标题栏上language按钮选择简体中文 再点击旁边的setting选项，设置好一个能连接上Google的代理(点击test可以测试连接可用性) 之后选择文件和视频的语言(原视频是什么语言就选什么语言) 点击生成字幕之后耐心等待 最后你会得到srt和txt文件 到这里就已经结束了，请享用你的字幕吧","title":"视频字幕神器pyTranscriber"},{"content":"","date":"1 December 2022","permalink":"/tags/%E5%AD%97%E5%B9%95/","section":"Tags","summary":"","title":"字幕"},{"content":"","date":"24 November 2022","permalink":"/tags/%E7%BD%91%E7%AB%99/","section":"Tags","summary":"","title":"网站"},{"content":" 笔记 # 这些笔记是我阅读知乎上觉得重要的内容摘抄下来的\n世界是事实的总和，而非物的总和 # 我们观察的不可能是超越时间的、不变的“物” 实无穷与潜无穷 # 排中律 世界是无限的 当用“非A”代替“B”时，其逻辑依然是“A或非A”为真的条件是“A为真”或“非A”为真，而不能说“A或非A”这个命题恒为真。 世界是有限的 保证了A和非A构成一个整体 “真的意义” # 当命题表达了实际情况时，命题就是“真”的；否则命题就是表达了非实际情况，也就是“假”的。维特根斯坦用这个命题将世界的“真”锁定在过去和当下中。 两类逻辑 # “逻辑必然的数学推理”和“逻辑不必然的力学推理” 维特根斯坦通过这个命题（1.13逻辑空间中的事实是世界）区分了“数学的逻辑”和“力学的逻辑” 数学的每一个定理和推论都是公理的同义反复或者是公理的矛盾命题，这类命题要不是必然的，要不是不可能的，它们的“真、假”在逻辑上是必然的，但是也没有告诉人们新的知识。而力学的逻辑，或者说物理命题的“真假”是由它们是否与事实一致进行判断的。 逻辑空间中的“事实”是物理命题，而逻辑空间中的“非事实”则是纯形式化的逻辑命题。 世界是可还原的 # 使用还原论去认识世界 一个基本组成成分和另一个相互独立，互不影响 与还原论相对的是整体论或系统论，就是把复杂系统看着是一个整体 世界之内与世界之外 # 世界是所有基本事态的存在 “物的可能状态”只有在实际发生后，才进入世界之内。而“物的可能状态”没有实际发生，那么就是在世界之外。 参考链接 # 维特根斯坦《逻辑哲学论》解读\n","date":"24 November 2022","permalink":"/notes/wittgenstein/","section":"Notes","summary":"笔记 # 这些笔记是我阅读知乎上觉得重要的内容摘抄下来的\n世界是事实的总和，而非物的总和 # 我们观察的不可能是超越时间的、不变的“物” 实无穷与潜无穷 # 排中律 世界是无限的 当用“非A”代替“B”时，其逻辑依然是“A或非A”为真的条件是“A为真”或“非A”为真，而不能说“A或非A”这个命题恒为真。 世界是有限的 保证了A和非A构成一个整体 “真的意义” # 当命题表达了实际情况时，命题就是“真”的；否则命题就是表达了非实际情况，也就是“假”的。维特根斯坦用这个命题将世界的“真”锁定在过去和当下中。 两类逻辑 # “逻辑必然的数学推理”和“逻辑不必然的力学推理” 维特根斯坦通过这个命题（1.13逻辑空间中的事实是世界）区分了“数学的逻辑”和“力学的逻辑” 数学的每一个定理和推论都是公理的同义反复或者是公理的矛盾命题，这类命题要不是必然的，要不是不可能的，它们的“真、假”在逻辑上是必然的，但是也没有告诉人们新的知识。而力学的逻辑，或者说物理命题的“真假”是由它们是否与事实一致进行判断的。 逻辑空间中的“事实”是物理命题，而逻辑空间中的“非事实”则是纯形式化的逻辑命题。 世界是可还原的 # 使用还原论去认识世界 一个基本组成成分和另一个相互独立，互不影响 与还原论相对的是整体论或系统论，就是把复杂系统看着是一个整体 世界之内与世界之外 # 世界是所有基本事态的存在 “物的可能状态”只有在实际发生后，才进入世界之内。而“物的可能状态”没有实际发生，那么就是在世界之外。 参考链接 # 维特根斯坦《逻辑哲学论》解读","title":"维特根斯坦"},{"content":" 网站涉及相关 # 网站设计 # 首先我使用了 Hugo这个网站框架并且配上了 stack主题\n网站搭建 # 将网站搭建在 GitHub Pages上\n还使用了 Azure的静态web解析，相当于有两个域名了\n网站编辑 # 我使用 Obsidian进行博客网站的编辑，他支持 Markdown语言，并且拥有模板。\n本来是向用 Visual Studio Code 进行编辑的，这样还可以做到编译和发布all in one，但是考虑到模板和文件内容整理问题，我还是使用了 Obsidian\n同时我编辑的内容也通过 OneDrive同步到云端，这样也不用担心数据丢失的问题\n网站更新 # 使用 Hugo编译好网站之后用git将写好的内容push到远程仓库里，这样就能够实现更新博客内容\n总结 # 这次建设网站没有花我一分钱，域名啥的我也没有购买。\n我觉得这是非常适合我这穷学生的建设网站的方式。如果有兴趣的话我也可以出一篇详细的建设教程。\n","date":"24 November 2022","permalink":"/posts/website/","section":"Posts","summary":"网站涉及相关 # 网站设计 # 首先我使用了 Hugo这个网站框架并且配上了 stack主题\n网站搭建 # 将网站搭建在 GitHub Pages上\n还使用了 Azure的静态web解析，相当于有两个域名了\n网站编辑 # 我使用 Obsidian进行博客网站的编辑，他支持 Markdown语言，并且拥有模板。\n本来是向用 Visual Studio Code 进行编辑的，这样还可以做到编译和发布all in one，但是考虑到模板和文件内容整理问题，我还是使用了 Obsidian\n同时我编辑的内容也通过 OneDrive同步到云端，这样也不用担心数据丢失的问题","title":"我网站使用的一些东西"},{"content":"","date":"1 January 0001","permalink":"/%E6%A8%A1%E6%9D%BF/%E6%A8%A1%E6%9D%BF/","section":"模板s","summary":"","title":""},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/tags/doing/","section":"Tags","summary":"","title":"doing"},{"content":" 正在做 # 正在学习日语，观看梦子老师的视频 Youtube 正在读 《西方哲学十五讲》 已完成 # nonebot-plugin-playercheck编写 Github ","date":"1 January 0001","permalink":"/doing/","section":"Doing","summary":" 正在做 # 正在学习日语，观看梦子老师的视频 Youtube 正在读 《西方哲学十五讲》 已完成 # nonebot-plugin-playercheck编写 Github ","title":"Doing"},{"content":"","date":"1 January 0001","permalink":"/tags/friends/","section":"Tags","summary":"","title":"friends"},{"content":"友情链接\n","date":"1 January 0001","permalink":"/friends/","section":"Friends","summary":"友情链接","title":"Friends"},{"content":"","date":"1 January 0001","permalink":"/tags/notes/","section":"Tags","summary":"","title":"notes"},{"content":"","date":"1 January 0001","permalink":"/tags/personal-site/","section":"Tags","summary":"","title":"Personal site"},{"content":"","date":"1 January 0001","permalink":"/friends/proxyerium/","section":"Friends","summary":"","title":"proxyerium的博客"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"关于我写这个博客的动机，其实就是经常有人问我，\u0026ldquo;哇，你那么厉害，这些是怎么做到的\u0026rdquo;，\u0026ldquo;你是怎么学会这些东西的\u0026quot;诸如此类的问题。其实我也知道，我不是什么技术牛人，单纯只是我网上冲浪，把一些信息整合起来加以利用，并且花时间去琢磨去使用。\n其实我也并不是学计算机专业，而是中医学专业的。而我看起来会的技术比你多实际上是因为我网上冲浪的时间比你长，仅此而已。在我看来，网上其实有很多很多的资源信息可以利用，我们可以不会写代码，但是别人写好的代码我们可以学会使用。GitHub上有很多优秀的代码，很多优秀的开源项目，我们学会使用它，不就能够提升我们的效率吗？\n很多时候，实际上是我们不知道，不知道有GitHub这个网站，不知道有这个项目。就像是有些人玩游戏却从来不知道Steam是什么一样。这是信息的缺失，有时候甚至我们都察觉不到我们缺失了什么信息。\n所以我推荐扩大自己的信息来源，善用搜索引擎，遇到问题可以尝试着去寻求更多的解决方案，在寻找解决方案的过程中，你可能发现你花费了大量的时间去解决一个简单的问题，但你总归是赚的。你会发现你从来没有接触过的一些解决方案，一些信息，并且在下次遇到类似需求的问题的时候，你就能凭借你的网上冲浪的经验，去更好的解决问题\n我写这个博客，也是在给你们提供信息，里面包含着一些我在使用过程中遇到的一些问题，踩过的一些坑，希望它对你有所帮助。\n","date":"1 January 0001","permalink":"/about/","section":"关于博客","summary":"关于我写这个博客的动机，其实就是经常有人问我，\u0026ldquo;哇，你那么厉害，这些是怎么做到的\u0026rdquo;，\u0026ldquo;你是怎么学会这些东西的\u0026quot;诸如此类的问题。其实我也知道，我不是什么技术牛人，单纯只是我网上冲浪，把一些信息整合起来加以利用，并且花时间去琢磨去使用。\n其实我也并不是学计算机专业，而是中医学专业的。而我看起来会的技术比你多实际上是因为我网上冲浪的时间比你长，仅此而已。在我看来，网上其实有很多很多的资源信息可以利用，我们可以不会写代码，但是别人写好的代码我们可以学会使用。GitHub上有很多优秀的代码，很多优秀的开源项目，我们学会使用它，不就能够提升我们的效率吗？\n很多时候，实际上是我们不知道，不知道有GitHub这个网站，不知道有这个项目。就像是有些人玩游戏却从来不知道Steam是什么一样。这是信息的缺失，有时候甚至我们都察觉不到我们缺失了什么信息。\n所以我推荐扩大自己的信息来源，善用搜索引擎，遇到问题可以尝试着去寻求更多的解决方案，在寻找解决方案的过程中，你可能发现你花费了大量的时间去解决一个简单的问题，但你总归是赚的。你会发现你从来没有接触过的一些解决方案，一些信息，并且在下次遇到类似需求的问题的时候，你就能凭借你的网上冲浪的经验，去更好的解决问题\n我写这个博客，也是在给你们提供信息，里面包含着一些我在使用过程中遇到的一些问题，踩过的一些坑，希望它对你有所帮助。","title":"关于博客"},{"content":"","date":"1 January 0001","permalink":"/%E6%A8%A1%E6%9D%BF/","section":"模板s","summary":"","title":"模板s"}]